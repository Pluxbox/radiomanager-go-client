/*
RadioManager

This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.

API version: 2.0
Contact: support@pluxbox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package radiomanagerclient

import (
	"encoding/json"
	"fmt"
)

// UnusedBooleanParameter - struct for UnusedBooleanParameter
type UnusedBooleanParameter struct {
	Bool *bool
	Int32 *int32
}

// boolAsUnusedBooleanParameter is a convenience function that returns bool wrapped in UnusedBooleanParameter
func BoolAsUnusedBooleanParameter(v *bool) UnusedBooleanParameter {
	return UnusedBooleanParameter{
		Bool: v,
	}
}

// int32AsUnusedBooleanParameter is a convenience function that returns int32 wrapped in UnusedBooleanParameter
func Int32AsUnusedBooleanParameter(v *int32) UnusedBooleanParameter {
	return UnusedBooleanParameter{
		Int32: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UnusedBooleanParameter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Bool
	err = newStrictDecoder(data).Decode(&dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			match++
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			match++
		}
	} else {
		dst.Int32 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Bool = nil
		dst.Int32 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UnusedBooleanParameter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UnusedBooleanParameter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UnusedBooleanParameter) MarshalJSON() ([]byte, error) {
	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UnusedBooleanParameter) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Bool != nil {
		return obj.Bool
	}

	if obj.Int32 != nil {
		return obj.Int32
	}

	// all schemas are nil
	return nil
}

type NullableUnusedBooleanParameter struct {
	value *UnusedBooleanParameter
	isSet bool
}

func (v NullableUnusedBooleanParameter) Get() *UnusedBooleanParameter {
	return v.value
}

func (v *NullableUnusedBooleanParameter) Set(val *UnusedBooleanParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableUnusedBooleanParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableUnusedBooleanParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnusedBooleanParameter(val *UnusedBooleanParameter) *NullableUnusedBooleanParameter {
	return &NullableUnusedBooleanParameter{value: val, isSet: true}
}

func (v NullableUnusedBooleanParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnusedBooleanParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


