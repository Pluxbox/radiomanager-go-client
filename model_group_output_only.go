/*
RadioManager

This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.

API version: 2.0
Contact: support@pluxbox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package radiomanagerclient

import (
	"encoding/json"
	"time"
)

// GroupOutputOnly struct for GroupOutputOnly
type GroupOutputOnly struct {
	Id int64 `json:"id"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedAt time.Time `json:"created_at"`
	DeletedAt time.Time `json:"deleted_at"`
}

// NewGroupOutputOnly instantiates a new GroupOutputOnly object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupOutputOnly(id int64, updatedAt time.Time, createdAt time.Time, deletedAt time.Time) *GroupOutputOnly {
	this := GroupOutputOnly{}
	this.Id = id
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	this.DeletedAt = deletedAt
	return &this
}

// NewGroupOutputOnlyWithDefaults instantiates a new GroupOutputOnly object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupOutputOnlyWithDefaults() *GroupOutputOnly {
	this := GroupOutputOnly{}
	return &this
}

// GetId returns the Id field value
func (o *GroupOutputOnly) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GroupOutputOnly) GetIdOk() (*int64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GroupOutputOnly) SetId(v int64) {
	o.Id = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *GroupOutputOnly) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *GroupOutputOnly) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *GroupOutputOnly) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *GroupOutputOnly) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *GroupOutputOnly) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *GroupOutputOnly) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDeletedAt returns the DeletedAt field value
func (o *GroupOutputOnly) GetDeletedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value
// and a boolean to check if the value has been set.
func (o *GroupOutputOnly) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DeletedAt, true
}

// SetDeletedAt sets field value
func (o *GroupOutputOnly) SetDeletedAt(v time.Time) {
	o.DeletedAt = v
}

func (o GroupOutputOnly) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	return json.Marshal(toSerialize)
}

type NullableGroupOutputOnly struct {
	value *GroupOutputOnly
	isSet bool
}

func (v NullableGroupOutputOnly) Get() *GroupOutputOnly {
	return v.value
}

func (v *NullableGroupOutputOnly) Set(val *GroupOutputOnly) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupOutputOnly) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupOutputOnly) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupOutputOnly(val *GroupOutputOnly) *NullableGroupOutputOnly {
	return &NullableGroupOutputOnly{value: val, isSet: true}
}

func (v NullableGroupOutputOnly) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupOutputOnly) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


