/*
RadioManager

This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.

API version: 2.0
Contact: support@pluxbox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package radiomanagerclient

import (
	"encoding/json"
)

// InlineResponse422 struct for InlineResponse422
type InlineResponse422 struct {
	// A key/value list that displays all the invalid properties.
	Errors map[string]interface{} `json:"errors,omitempty"`
	// Corresponding HTTP Response Status Code
	StatusCode *int32 `json:"statusCode,omitempty"`
}

// NewInlineResponse422 instantiates a new InlineResponse422 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse422() *InlineResponse422 {
	this := InlineResponse422{}
	return &this
}

// NewInlineResponse422WithDefaults instantiates a new InlineResponse422 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse422WithDefaults() *InlineResponse422 {
	this := InlineResponse422{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *InlineResponse422) GetErrors() map[string]interface{} {
	if o == nil || isNil(o.Errors) {
		var ret map[string]interface{}
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse422) GetErrorsOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Errors) {
    return map[string]interface{}{}, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *InlineResponse422) HasErrors() bool {
	if o != nil && !isNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given map[string]interface{} and assigns it to the Errors field.
func (o *InlineResponse422) SetErrors(v map[string]interface{}) {
	o.Errors = v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *InlineResponse422) GetStatusCode() int32 {
	if o == nil || isNil(o.StatusCode) {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse422) GetStatusCodeOk() (*int32, bool) {
	if o == nil || isNil(o.StatusCode) {
    return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *InlineResponse422) HasStatusCode() bool {
	if o != nil && !isNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *InlineResponse422) SetStatusCode(v int32) {
	o.StatusCode = &v
}

func (o InlineResponse422) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !isNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse422 struct {
	value *InlineResponse422
	isSet bool
}

func (v NullableInlineResponse422) Get() *InlineResponse422 {
	return v.value
}

func (v *NullableInlineResponse422) Set(val *InlineResponse422) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse422) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse422) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse422(val *InlineResponse422) *NullableInlineResponse422 {
	return &NullableInlineResponse422{value: val, isSet: true}
}

func (v NullableInlineResponse422) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse422) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


