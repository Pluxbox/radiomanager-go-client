/*
RadioManager

This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.

API version: 2.0
Contact: support@pluxbox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package radiomanagerclient

import (
	"encoding/json"
)

// ItemInputOnly struct for ItemInputOnly
type ItemInputOnly struct {
	PreviousId *int64 `json:"_previous_id,omitempty"`
	BeforeId *int64 `json:"_before_id,omitempty"`
	Contacts []int32 `json:"contacts,omitempty"`
	Tags []int32 `json:"tags,omitempty"`
}

// NewItemInputOnly instantiates a new ItemInputOnly object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemInputOnly() *ItemInputOnly {
	this := ItemInputOnly{}
	return &this
}

// NewItemInputOnlyWithDefaults instantiates a new ItemInputOnly object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemInputOnlyWithDefaults() *ItemInputOnly {
	this := ItemInputOnly{}
	return &this
}

// GetPreviousId returns the PreviousId field value if set, zero value otherwise.
func (o *ItemInputOnly) GetPreviousId() int64 {
	if o == nil || isNil(o.PreviousId) {
		var ret int64
		return ret
	}
	return *o.PreviousId
}

// GetPreviousIdOk returns a tuple with the PreviousId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemInputOnly) GetPreviousIdOk() (*int64, bool) {
	if o == nil || isNil(o.PreviousId) {
    return nil, false
	}
	return o.PreviousId, true
}

// HasPreviousId returns a boolean if a field has been set.
func (o *ItemInputOnly) HasPreviousId() bool {
	if o != nil && !isNil(o.PreviousId) {
		return true
	}

	return false
}

// SetPreviousId gets a reference to the given int64 and assigns it to the PreviousId field.
func (o *ItemInputOnly) SetPreviousId(v int64) {
	o.PreviousId = &v
}

// GetBeforeId returns the BeforeId field value if set, zero value otherwise.
func (o *ItemInputOnly) GetBeforeId() int64 {
	if o == nil || isNil(o.BeforeId) {
		var ret int64
		return ret
	}
	return *o.BeforeId
}

// GetBeforeIdOk returns a tuple with the BeforeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemInputOnly) GetBeforeIdOk() (*int64, bool) {
	if o == nil || isNil(o.BeforeId) {
    return nil, false
	}
	return o.BeforeId, true
}

// HasBeforeId returns a boolean if a field has been set.
func (o *ItemInputOnly) HasBeforeId() bool {
	if o != nil && !isNil(o.BeforeId) {
		return true
	}

	return false
}

// SetBeforeId gets a reference to the given int64 and assigns it to the BeforeId field.
func (o *ItemInputOnly) SetBeforeId(v int64) {
	o.BeforeId = &v
}

// GetContacts returns the Contacts field value if set, zero value otherwise.
func (o *ItemInputOnly) GetContacts() []int32 {
	if o == nil || isNil(o.Contacts) {
		var ret []int32
		return ret
	}
	return o.Contacts
}

// GetContactsOk returns a tuple with the Contacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemInputOnly) GetContactsOk() ([]int32, bool) {
	if o == nil || isNil(o.Contacts) {
    return nil, false
	}
	return o.Contacts, true
}

// HasContacts returns a boolean if a field has been set.
func (o *ItemInputOnly) HasContacts() bool {
	if o != nil && !isNil(o.Contacts) {
		return true
	}

	return false
}

// SetContacts gets a reference to the given []int32 and assigns it to the Contacts field.
func (o *ItemInputOnly) SetContacts(v []int32) {
	o.Contacts = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ItemInputOnly) GetTags() []int32 {
	if o == nil || isNil(o.Tags) {
		var ret []int32
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemInputOnly) GetTagsOk() ([]int32, bool) {
	if o == nil || isNil(o.Tags) {
    return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ItemInputOnly) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []int32 and assigns it to the Tags field.
func (o *ItemInputOnly) SetTags(v []int32) {
	o.Tags = v
}

func (o ItemInputOnly) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.PreviousId) {
		toSerialize["_previous_id"] = o.PreviousId
	}
	if !isNil(o.BeforeId) {
		toSerialize["_before_id"] = o.BeforeId
	}
	if !isNil(o.Contacts) {
		toSerialize["contacts"] = o.Contacts
	}
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableItemInputOnly struct {
	value *ItemInputOnly
	isSet bool
}

func (v NullableItemInputOnly) Get() *ItemInputOnly {
	return v.value
}

func (v *NullableItemInputOnly) Set(val *ItemInputOnly) {
	v.value = val
	v.isSet = true
}

func (v NullableItemInputOnly) IsSet() bool {
	return v.isSet
}

func (v *NullableItemInputOnly) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemInputOnly(val *ItemInputOnly) *NullableItemInputOnly {
	return &NullableItemInputOnly{value: val, isSet: true}
}

func (v NullableItemInputOnly) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemInputOnly) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


