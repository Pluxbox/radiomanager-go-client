/*
RadioManager

This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.

API version: 2.0
Contact: support@pluxbox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package radiomanagerclient

import (
	"encoding/json"
)

// InlineResponse429 struct for InlineResponse429
type InlineResponse429 struct {
	// Rate limit response
	Error *string `json:"error,omitempty"`
	// Corresponding HTTP Response Status Code
	StatusCode *int64 `json:"statusCode,omitempty"`
}

// NewInlineResponse429 instantiates a new InlineResponse429 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse429() *InlineResponse429 {
	this := InlineResponse429{}
	return &this
}

// NewInlineResponse429WithDefaults instantiates a new InlineResponse429 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse429WithDefaults() *InlineResponse429 {
	this := InlineResponse429{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *InlineResponse429) GetError() string {
	if o == nil || isNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse429) GetErrorOk() (*string, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *InlineResponse429) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *InlineResponse429) SetError(v string) {
	o.Error = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *InlineResponse429) GetStatusCode() int64 {
	if o == nil || isNil(o.StatusCode) {
		var ret int64
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse429) GetStatusCodeOk() (*int64, bool) {
	if o == nil || isNil(o.StatusCode) {
    return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *InlineResponse429) HasStatusCode() bool {
	if o != nil && !isNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int64 and assigns it to the StatusCode field.
func (o *InlineResponse429) SetStatusCode(v int64) {
	o.StatusCode = &v
}

func (o InlineResponse429) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !isNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse429 struct {
	value *InlineResponse429
	isSet bool
}

func (v NullableInlineResponse429) Get() *InlineResponse429 {
	return v.value
}

func (v *NullableInlineResponse429) Set(val *InlineResponse429) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse429) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse429) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse429(val *InlineResponse429) *NullableInlineResponse429 {
	return &NullableInlineResponse429{value: val, isSet: true}
}

func (v NullableInlineResponse429) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse429) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


