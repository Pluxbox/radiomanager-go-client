openapi: 3.0.1
info:
  contact:
    email: support@pluxbox.com
    name: Pluxbox
    url: https://pluxbox.com
  description: RadioManager
  license:
    name: License
    url: https://pluxbox.com/license
  termsOfService: https://pluxbox.com/tos
  title: RadioManager
  version: "2.0"
servers:
- url: https://radiomanager.io/api/v2
- url: http://radiomanager.io/api/v2
tags:
- description: Items
  name: Items
- description: Broadcasts
  name: Broadcasts
- description: Blocks
  name: Block
- description: Campaigns
  name: Campaign
- description: Contacts
  name: Contact
- description: Stories
  name: Story
- description: Genre's
  name: Genre
- description: Model Type's
  name: ModelType
- description: Presenters
  name: Presenter
- description: Programs
  name: Program
- description: PTYCodes
  name: PTYCode
- description: Real Time API
  name: RealTimeAPI
- description: Roles
  name: Role
- description: Stations
  name: Station
- description: Station Settings
  name: StationSetting
- description: Tags
  name: Tag
- description: Templates
  name: Template
- description: Users
  name: User
- description: Visual Slides
  name: VisualSlide
- description: Strings
  name: String
paths:
  /blocks:
    get:
      description: Get a list of all blocks currently in your station. This feature
        supports pagination and will give a maximum of 50 blocks back.
      operationId: listBlocks
      parameters:
      - description: Current page *(Optional)*
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          format: int64
          minimum: 0
          type: integer
        style: form
      - description: Search on Broadcast ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: broadcast_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Item ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: item_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Program ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: program_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Minimum start date *(Optional)*
        explode: true
        in: query
        name: start-min
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Maximum start date *(Optional)*
        explode: true
        in: query
        name: start-max
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Results per page *(Optional)*
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int64
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: Field to order the results *(Optional)*
        explode: true
        in: query
        name: order-by
        required: false
        schema:
          type: string
        style: form
      - description: Direction of ordering *(Optional)*
        explode: true
        in: query
        name: order-direction
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResults'
          description: Successfully got all blocks
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get a list of all blocks currently in your station.
      tags:
      - Block
  /blocks/{id}:
    get:
      description: Get block by id
      operationId: getBlockById
      parameters:
      - description: ID of Block **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResult'
          description: Successfully got Block by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get block by id
      tags:
      - Block
  /blocks/current:
    get:
      description: Get current Block
      operationId: getCurrentBlock
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResult'
          description: Successfully got current Block
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get current Block
      tags:
      - Block
  /blocks/next:
    get:
      description: Get upcoming Block
      operationId: getNextBlock
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResult'
          description: Successfully got upcoming Block
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get upcoming Block
      tags:
      - Block
  /broadcasts:
    get:
      description: List all broadcasts.
      operationId: listBroadcasts
      parameters:
      - description: Current page *(Optional)*
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          format: int64
          minimum: 0
          type: integer
        style: form
      - description: Search on Program ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: program_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Block ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: block_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on ModelType ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: model_type_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Tag ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: tag_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Presenter ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: presenter_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Genre ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: genre_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Item ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: item_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Minimum start date *(Optional)*
        explode: true
        in: query
        name: start-min
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Maximum start date *(Optional)*
        explode: true
        in: query
        name: start-max
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Results per page *(Optional)*
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int64
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: Field to order the results *(Optional)*
        explode: true
        in: query
        name: order-by
        required: false
        schema:
          type: string
        style: form
      - description: Direction of ordering *(Optional)*
        explode: true
        in: query
        name: order-direction
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastResults'
          description: Successfully got all broadcasts
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get all broadcasts.
      tags:
      - Broadcast
    post:
      description: Create broadcast.
      operationId: createBroadcast
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroadcastDataInput'
        description: Data **(Required)**
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSuccess'
          description: Successfully created a broadcast
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Create broadcast.
      tags:
      - Broadcast
      x-codegen-request-body-name: data
  /broadcasts/{id}:
    delete:
      description: Delete broadcast by id
      operationId: deleteBroadcastById
      parameters:
      - description: ID of Broadcast **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully deleted Broadcast by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Delete broadcast by id
      tags:
      - Broadcast
    get:
      description: Get broadcast by id
      operationId: getBroadcastById
      parameters:
      - description: ID of Broadcast **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastResult'
          description: Successfully got Broadcast by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get broadcast by id
      tags:
      - Broadcast
    patch:
      description: Update broadcast by id
      operationId: updateBroadcastByID
      parameters:
      - description: ID of Broadcast **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroadcastDataInput'
        description: Data *(Optional)*
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully updated Broadcast by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Update broadcast by id
      tags:
      - Broadcast
      x-codegen-request-body-name: data
  /broadcasts/current:
    get:
      description: Get current Broadcast
      operationId: getCurrentBroadcast
      parameters:
      - description: Show Unpublished *(Optional)*
        explode: true
        in: query
        name: withunpublished
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastResult'
          description: Successfully got current Broadcast
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get current Broadcast
      tags:
      - Broadcast
  /broadcasts/next:
    get:
      description: Get next Broadcast
      operationId: getNextBroadcast
      parameters:
      - description: Show Unpublished *(Optional)*
        explode: true
        in: query
        name: withunpublished
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastResult'
          description: Successfully got next Broadcast
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get next Broadcast
      tags:
      - Broadcast
  /broadcasts/epg:
    get:
      description: Get EPG by date
      operationId: getEPGByDate
      parameters:
      - description: Date *(Optional)*
        explode: true
        in: query
        name: date
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Show Unpublished *(Optional)*
        explode: true
        in: query
        name: withunpublished
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EPGResults'
          description: Successfully got EPG by week
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get EPG by date
      tags:
      - Broadcast
  /broadcasts/epg/daily:
    get:
      description: Get current Broadcast
      operationId: getDailyEPG
      parameters:
      - description: Date *(Optional)*
        explode: true
        in: query
        name: date
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Show Unpublished *(Optional)*
        explode: true
        in: query
        name: withunpublished
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EPGResults'
          description: Successfully got EPG by week
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get daily EPG
      tags:
      - Broadcast
  /broadcasts/epg/weekly:
    get:
      description: Get weekly EPG
      operationId: getWeeklyEPG
      parameters:
      - description: Date *(Optional)*
        explode: true
        in: query
        name: date
        required: false
        schema:
          format: 'date '
          type: string
        style: form
      - description: Show Unpublished *(Optional)*
        explode: true
        in: query
        name: withunpublished
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EPGResults'
          description: Successfully got EPG by week
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get weekly EPG
      tags:
      - Broadcast
  /broadcasts/print/{id}:
    get:
      description: Print broadcast by id with template
      operationId: printBroadcastById
      parameters:
      - description: ID of Broadcast **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      - description: Search on template ID *(Optional)*
        explode: true
        in: query
        name: template_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example: <html></html>
                type: string
          description: Successfully printed Broadcast by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Print broadcast by id with template
      tags:
      - Broadcast
  /campaigns:
    get:
      description: List all campaigns.
      operationId: listCampaigns
      parameters:
      - description: Current page *(Optional)*
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int64
          minimum: 0
          type: integer
        style: form
      - description: Search on Item ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: item_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on ModelType ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: model_type_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Minimum start date *(Optional)*
        explode: true
        in: query
        name: start-min
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Maximum start date *(Optional)*
        explode: true
        in: query
        name: start-max
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Results per page *(Optional)*
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int64
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: Field to order the results *(Optional)*
        explode: true
        in: query
        name: order-by
        required: false
        schema:
          type: string
        style: form
      - description: Direction of ordering *(Optional)*
        explode: true
        in: query
        name: order-direction
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignResults'
          description: Successfully got all campaigns
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get all campaigns.
      tags:
      - Campaign
    post:
      description: Create campaign.
      operationId: createCampaign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignDataInput'
        description: Data **(Required)**
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSuccess'
          description: Successfully created a campaign
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Create campaign.
      tags:
      - Campaign
      x-codegen-request-body-name: data
  /campaigns/{id}:
    delete:
      description: Delete campaign by id
      operationId: deleteCampaignById
      parameters:
      - description: ID of Campaign **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully deleted Campaign by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Delete campaign by id
      tags:
      - Campaign
    get:
      description: Get campaign by id
      operationId: getCampaignById
      parameters:
      - description: ID of Campaign **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignResult'
          description: Successfully got Campaign by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get campaign by id
      tags:
      - Campaign
    patch:
      description: Update campaign by id
      operationId: updateCampaignByID
      parameters:
      - description: ID of Campaign **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignDataInput'
        description: Data *(Optional)*
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully updated Campaign by ID
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Update campaign by id
      tags:
      - Campaign
      x-codegen-request-body-name: data
  /contacts:
    get:
      description: List all contacts.
      operationId: listContacts
      parameters:
      - description: Current page *(Optional)*
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          format: int64
          minimum: 0
          type: integer
        style: form
      - description: Search on Item ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: item_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on ModelType ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: model_type_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Tag ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: tag_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Results per page *(Optional)*
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int64
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: Field to order the results *(Optional)*
        explode: true
        in: query
        name: order-by
        required: false
        schema:
          type: string
        style: form
      - description: Direction of ordering *(Optional)*
        explode: true
        in: query
        name: order-direction
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactResults'
          description: Successfully got all contacts
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get all contacts.
      tags:
      - Contact
    post:
      description: Create contact.
      operationId: createContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactDataInput'
        description: Data **(Required)**
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSuccess'
          description: Successfully created a contact
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Create contact.
      tags:
      - Contact
      x-codegen-request-body-name: data
  /contacts/{id}:
    delete:
      description: Delete contact by id
      operationId: deleteContactById
      parameters:
      - description: ID of Contact **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully deleted Contact by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Delete contact by id
      tags:
      - Contact
    get:
      description: Get contact by id
      operationId: getContactById
      parameters:
      - description: ID of Contact **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactResult'
          description: Successfully got Contact by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get contact by id
      tags:
      - Contact
    patch:
      description: Update contact by id
      operationId: updateContactByID
      parameters:
      - description: ID of Contact **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactDataInput'
        description: Data *(Optional)*
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully updated Contact by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Update contact by id
      tags:
      - Contact
      x-codegen-request-body-name: data
  /genres:
    get:
      description: List all genres.
      operationId: listGenres
      parameters:
      - description: Current page *(Optional)*
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int64
          minimum: 0
          type: integer
        style: form
      - description: Search on Parent ID of Genre *(Optional)*
        explode: true
        in: query
        name: parent_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Program ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: program_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Broadcast ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: broadcast_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Results per page *(Optional)*
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int64
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: Field to order the results *(Optional)*
        explode: true
        in: query
        name: order-by
        required: false
        schema:
          type: string
        style: form
      - description: Direction of ordering *(Optional)*
        explode: true
        in: query
        name: order-direction
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreResults'
          description: Successfully got all genres
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: List all genres.
      tags:
      - Genre
  /genres/{id}:
    get:
      description: Get genre by id
      operationId: getGenreById
      parameters:
      - description: ID of Genre **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreResult'
          description: Successfully got Genre by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get genre by id
      tags:
      - Genre
  /items:
    get:
      description: Get a list of all the items currently in your station. This feature
        supports pagination and will give a maximum results of 50 items back.
      operationId: listItems
      parameters:
      - description: Current page *(Optional)*
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int64
          minimum: 1
          type: integer
        style: form
      - description: Search on Block ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: block_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Broadcast ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: broadcast_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on ModelType ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: model_type_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Tag ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: tag_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Campaign ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: campaign_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Contact ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: contact_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Program Draft ID *(Optional)*
        explode: true
        in: query
        name: program_draft_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on User Draft ID *(Optional)*
        explode: true
        in: query
        name: user_draft_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Station Draft ID *(Optional)*
        explode: true
        in: query
        name: station_draft_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Program ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: program_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on External ID *(Optional)*
        explode: true
        in: query
        name: external_id
        required: false
        schema:
          type: string
        style: form
      - description: Minimum start date *(Optional)*
        explode: true
        in: query
        name: start-min
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Maximum start date *(Optional)*
        explode: true
        in: query
        name: start-max
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Minimum duration (seconds) *(Optional)*
        explode: true
        in: query
        name: duration-min
        required: false
        schema:
          type: integer
        style: form
      - description: Maximum duration (seconds) *(Optional)*
        explode: true
        in: query
        name: duration-max
        required: false
        schema:
          type: integer
        style: form
      - description: Play Status of item *(Optional)*
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - scheduled
          - playing
          - played
          type: string
        style: form
      - description: Results per page *(Optional)*
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int64
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: Field to order the results *(Optional)*
        explode: true
        in: query
        name: order-by
        required: false
        schema:
          type: string
        style: form
      - description: Direction of ordering *(Optional)*
        explode: true
        in: query
        name: order-direction
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResults'
          description: Successfully got all items
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get a list of all the items currently in your station.
      tags:
      - Item
    post:
      description: Create item.
      operationId: createItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemDataInput'
        description: Data *(Optional)*
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSuccess'
          description: Successfully created an item
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Create an new item.
      tags:
      - Item
      x-codegen-request-body-name: data
  /items/{id}:
    delete:
      description: Delete item by id.
      operationId: deleteItemById
      parameters:
      - description: ID of Item **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Item has been marked for deletion
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
      security:
      - API-Key: []
      summary: Delete item by ID.
      tags:
      - Item
    get:
      description: Read item by id.
      operationId: getItemById
      parameters:
      - description: ID of Item **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResult'
          description: Successfully got an item by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get extended item details by ID.
      tags:
      - Item
    patch:
      description: Update item by id.
      operationId: updateItemById
      parameters:
      - description: ID of Item **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemDataInput'
        description: Data *(Optional)*
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully updated an item
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Update extended item details by ID.
      tags:
      - Item
      x-codegen-request-body-name: data
  /items/current:
    get:
      description: Get current Item
      operationId: getCurrentItem
      parameters:
      - description: Show last played item if there is no current item*(Optional)*
        explode: true
        in: query
        name: lastplayed
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResult'
          description: Successfully got current item
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Item has been marked for deletion
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
      security:
      - API-Key: []
      summary: Get current Item
      tags:
      - Item
  /items/current/timing:
    post:
      description: Post a current playing item
      operationId: currentItemPostTiming
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportItem'
        description: Data *(Optional)*
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully posted current item
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Post a current playing item
      tags:
      - Item
      x-codegen-request-body-name: data
  /items/current/structure:
    post:
      description: Post a current playing item, keep structure
      operationId: currentItemPostStructure
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportItem'
        description: Data *(Optional)*
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully posted current item
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Post a current playing item, keep structure
      tags:
      - Item
      x-codegen-request-body-name: data
  /items/playlist/timing:
    post:
      description: Post a playlist
      operationId: playlistPostTiming
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          application/json:
            schema:
              properties:
                start:
                  example: 2017-06-23T12:00:00+02:00
                  format: date-time
                  type: string
                allow_playlist_past:
                  example: 0
                  type: integer
                items:
                  items:
                    $ref: '#/components/schemas/ImportItem'
                  type: array
              type: object
        description: Data *(Optional)*
        required: false
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_202'
          description: success
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
      security:
      - API-Key: []
      summary: Post a playlist
      tags:
      - Item
      x-codegen-request-body-name: data
  /items/playlist/structure:
    post:
      description: Post a playlist, keep current structure
      operationId: playlistPostStructure
      requestBody:
        $ref: '#/components/requestBodies/inline_object_1'
        content:
          application/json:
            schema:
              properties:
                start:
                  example: 2017-06-23T12:00:00+02:00
                  format: date-time
                  type: string
                allow_playlist_past:
                  example: 0
                  type: integer
                items:
                  items:
                    $ref: '#/components/schemas/ImportItem'
                  type: array
              type: object
        description: Data *(Optional)*
        required: false
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_202'
          description: success
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
      security:
      - API-Key: []
      summary: Post a playlist, keep current structure
      tags:
      - Item
      x-codegen-request-body-name: data
  /items/playlist/merge:
    post:
      description: Post a playlist, do not remove previously imported items
      operationId: playlistPostMerge
      requestBody:
        $ref: '#/components/requestBodies/inline_object_2'
        content:
          application/json:
            schema:
              properties:
                start:
                  example: 2017-06-23T12:00:00+02:00
                  format: date-time
                  type: string
                allow_playlist_past:
                  example: 0
                  type: integer
                before_id:
                  example: 0
                  type: integer
                previous_id:
                  example: 0
                  type: integer
                items:
                  items:
                    $ref: '#/components/schemas/ImportItem'
                  type: array
              type: object
        description: Data *(Optional)*
        required: false
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_202'
          description: success
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
      security:
      - API-Key: []
      summary: Post a playlist, do not remove previously imported items
      tags:
      - Item
      x-codegen-request-body-name: data
  /items/stopcurrent:
    post:
      description: Set a current playing or specific item on played
      operationId: stopCurrentItem
      requestBody:
        $ref: '#/components/requestBodies/inline_object_3'
        content:
          application/json:
            schema:
              properties:
                id:
                  example: 1
                  type: integer
              type: object
        description: Data *(Optional)*
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully stopped item
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Stop an Item
      tags:
      - Item
      x-codegen-request-body-name: data
  /model_types:
    get:
      description: List all modelTypes.
      operationId: listModelTypes
      parameters:
      - description: Current page *(Optional)*
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int64
          minimum: 0
          type: integer
        style: form
      - description: Search on Program ID *(Optional)*
        explode: true
        in: query
        name: program_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Broadcast ID *(Optional)*
        explode: true
        in: query
        name: broadcast_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Item ID *(Optional)*
        explode: true
        in: query
        name: item_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Campaign ID *(Optional)*
        explode: true
        in: query
        name: campaign_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Presenter ID *(Optional)*
        explode: true
        in: query
        name: presenter_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Contact ID *(Optional)*
        explode: true
        in: query
        name: contact_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search Modeltypes for certain Model *(Optional)*
        explode: true
        in: query
        name: model
        required: false
        schema:
          enum:
          - broadcast
          - program
          - item
          - campaign
          - presenter
          - contact
          - external
          type: string
        style: form
      - description: Results per page *(Optional)*
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int64
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: Field to order the results *(Optional)*
        explode: true
        in: query
        name: order-by
        required: false
        schema:
          type: string
        style: form
      - description: Direction of ordering *(Optional)*
        explode: true
        in: query
        name: order-direction
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelTypeResults'
          description: Successfully got all modelTypes
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get all modelTypes.
      tags:
      - ModelType
  /model_types/{id}:
    get:
      description: Get modelType by id
      operationId: getModelTypeById
      parameters:
      - description: ID of ModelType **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelTypeResult'
          description: Successfully got ModelType by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get modelType by id
      tags:
      - ModelType
  /presenters:
    get:
      description: List all presenters.
      operationId: listPresenters
      parameters:
      - description: Current page *(Optional)*
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int64
          minimum: 0
          type: integer
        style: form
      - description: Search on Program ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: program_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Broadcast ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: broadcast_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on ModelType ID (Optional)
        explode: true
        in: query
        name: model_type_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Results per page *(Optional)*
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int64
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: Field to order the results *(Optional)*
        explode: true
        in: query
        name: order-by
        required: false
        schema:
          type: string
        style: form
      - description: Direction of ordering *(Optional)*
        explode: true
        in: query
        name: order-direction
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresenterResults'
          description: Successfully got all presenters
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get all presenters.
      tags:
      - Presenter
    post:
      description: Create presenter.
      operationId: createPresenter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresenterDataInput'
        description: Data **(Required)**
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSuccess'
          description: Successfully created a presenter
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Create presenter.
      tags:
      - Presenter
      x-codegen-request-body-name: data
  /presenters/{id}:
    delete:
      description: Delete presenter by id
      operationId: deletePresenterById
      parameters:
      - description: id of presenter
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully deleted presenter by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Delete presenter by id
      tags:
      - Presenter
    get:
      description: Get presenter by id
      operationId: getPresenterById
      parameters:
      - description: id of Presenter
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresenterResult'
          description: Successfully got Presenter by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get presenter by id
      tags:
      - Presenter
    patch:
      description: Update presenter by id
      operationId: updatePresenterByID
      parameters:
      - description: id of Presenter
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresenterDataInput'
        description: Data *(Optional)*
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully updated Presenter by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Update presenter by id
      tags:
      - Presenter
      x-codegen-request-body-name: data
  /programs:
    get:
      description: List all programs.
      operationId: listPrograms
      parameters:
      - description: Current page *(Optional)*
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int64
          minimum: 0
          type: integer
        style: form
      - description: Search on Broadcast ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: broadcast_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on ModelType ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: model_type_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Tag ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: tag_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Presenter ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: presenter_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Genre ID *(Optional)*
        explode: true
        in: query
        name: genre_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Block ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: block_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Item ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: item_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Disabled status *(Optional)*
        explode: true
        in: query
        name: disabled
        required: false
        schema:
          maximum: 1
          minimum: 0
          type: integer
        style: form
      - description: Results per page *(Optional)*
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int64
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: Field to order the results *(Optional)*
        explode: true
        in: query
        name: order-by
        required: false
        schema:
          type: string
        style: form
      - description: Direction of ordering *(Optional)*
        explode: true
        in: query
        name: order-direction
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramResults'
          description: Successfully got all programs
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get all programs.
      tags:
      - Program
    post:
      description: Create program.
      operationId: createProgram
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramDataInput'
        description: Data **(Required)**
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSuccess'
          description: Successfully created a program
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Create program.
      tags:
      - Program
      x-codegen-request-body-name: data
  /programs/{id}:
    delete:
      description: Delete program by id
      operationId: deleteProgramById
      parameters:
      - description: ID of program **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully deleted program by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Delete program by id
      tags:
      - Program
    get:
      description: Get program by id
      operationId: getProgramById
      parameters:
      - description: ID of Program **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramResult'
          description: Successfully got Program by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get program by id
      tags:
      - Program
    patch:
      description: Update program by id
      operationId: updateProgramByID
      parameters:
      - description: ID of Program **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramDataInput'
        description: Data *(Optional)*
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully updated Program by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Update program by id
      tags:
      - Program
      x-codegen-request-body-name: data
  /station:
    get:
      description: Get own station only
      operationId: getStation
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationResult'
          description: Station
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get own station only
      tags:
      - Station
  /stories:
    get:
      description: List all stories.
      operationId: listStories
      parameters:
      - description: Current page *(Optional)*
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          format: int64
          minimum: 0
          type: integer
        style: form
      - description: Search on Item ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: item_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on ModelType ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: model_type_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Tag ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: tag_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Results per page *(Optional)*
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int64
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: Field to order the results *(Optional)*
        explode: true
        in: query
        name: order-by
        required: false
        schema:
          type: string
        style: form
      - description: Direction of ordering *(Optional)*
        explode: true
        in: query
        name: order-direction
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryResults'
          description: Successfully got all stories
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get all stories.
      tags:
      - Story
    post:
      description: Create story.
      operationId: createStory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryDataInput'
        description: Data **(Required)**
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSuccess'
          description: Successfully created a story
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Create story.
      tags:
      - Story
      x-codegen-request-body-name: data
  /stories/{id}:
    delete:
      description: Delete story by id
      operationId: deleteStoryById
      parameters:
      - description: ID of Story **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully deleted Story by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Delete story by id
      tags:
      - Story
    get:
      description: Get story by id
      operationId: getStoryById
      parameters:
      - description: ID of Story **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryResult'
          description: Successfully got Story by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get story by id
      tags:
      - Story
    patch:
      description: Update story by id
      operationId: updateStoryByID
      parameters:
      - description: ID of Story **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryDataInput'
        description: Data *(Optional)*
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully updated Story by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Update story by id
      tags:
      - Story
      x-codegen-request-body-name: data
  /tags:
    get:
      description: Get a list of all the tags currently in your station. This feature
        supports pagination and will give a maximum results of 50 tags back.
      operationId: listTags
      parameters:
      - description: Current page *(Optional)*
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int64
          minimum: 1
          type: integer
        style: form
      - description: Search on Program ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: program_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Item ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: item_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Broadcast ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: broadcast_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Search on Contact ID *(Optional)* `(Relation)`
        explode: true
        in: query
        name: contact_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Results per page *(Optional)*
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int64
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: Field to order the results *(Optional)*
        explode: true
        in: query
        name: order-by
        required: false
        schema:
          type: string
        style: form
      - description: Direction of ordering *(Optional)*
        explode: true
        in: query
        name: order-direction
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResults'
          description: Successfully got all tags
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get a list of all the tags currently in your station.
      tags:
      - Tag
    post:
      description: Create tag.
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagDataInput'
        description: Data **(Required)**
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSuccess'
          description: Successfully created a tag
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Create tag.
      tags:
      - Tag
      x-codegen-request-body-name: data
  /tags/{id}:
    delete:
      description: Delete tag by id
      operationId: deleteTagById
      parameters:
      - description: ID of Tag **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully deleted Tag by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Delete tag by id
      tags:
      - Tag
    get:
      description: Get tags by id
      operationId: getTagById
      parameters:
      - description: ID of Tag **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      - description: Query on a different (content providing) station *(Optional)*
        explode: true
        in: query
        name: _external_station_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResult'
          description: Successfully got Tag by ID
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get tags by id
      tags:
      - Tag
    patch:
      description: Update tag by id
      operationId: updateTagByID
      parameters:
      - description: ID of Tag **(Required)**
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagDataInput'
        description: Data *(Optional)*
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully updated Tag by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Update tag by id
      tags:
      - Tag
      x-codegen-request-body-name: data
  /strings/{name}:
    get:
      description: Get Strings (formatted)
      operationId: getStringsByName
      parameters:
      - description: Name of Strings **(Required)**
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Full model or content only **(Required)**
        explode: true
        in: query
        name: full_model
        required: true
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextString'
          description: Successfully got Strings (formatted)
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get Strings (formatted)
      tags:
      - String
  /users:
    get:
      description: List all users.
      operationId: listUsers
      parameters:
      - description: Current page *(Optional)*
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          format: int64
          minimum: 0
          type: integer
        style: form
      - description: Search on Role ID *(Optional)*
        explode: true
        in: query
        name: role_id
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Results per page *(Optional)*
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int64
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: Field to order the results *(Optional)*
        explode: true
        in: query
        name: order-by
        required: false
        schema:
          type: string
        style: form
      - description: Direction of ordering *(Optional)*
        explode: true
        in: query
        name: order-direction
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResults'
          description: Successfully got all users
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get all users.
      tags:
      - User
  /users/{id}:
    delete:
      description: Remove user from station by Id
      operationId: deleteUserById
      parameters:
      - description: id of User
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
          description: Successfully deleted User by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Remove user from station by Id
      tags:
      - User
    get:
      description: Get user by id
      operationId: getUserById
      parameters:
      - description: id of User
        explode: false
        in: path
        name: id
        required: true
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResult'
          description: Successfully got User by id
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get user by id
      tags:
      - User
  /users/invite:
    post:
      description: Invite user by mail
      operationId: inviteUserByMail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteUserData'
        description: Data **(Required)**
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                title: InviteUserSuccess
                type: object
          description: Successfully invited User
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Invite user by mail
      tags:
      - User
      x-codegen-request-body-name: data
  /visual:
    get:
      description: Get Visual Slide Image as Base64
      operationId: getVisualSlide
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisualResult'
          description: Image as Base64
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
          description: Too Many Requests
      security:
      - API-Key: []
      summary: Get Visual Slide Image as Base64
      tags:
      - VisualSlide
components:
  requestBodies:
    inline_object_1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_1'
      required: false
    inline_object:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object'
      required: false
    inline_object_3:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_3'
      required: false
    inline_object_2:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_2'
      required: false
  schemas:
    BlockResult:
      allOf:
      - $ref: '#/components/schemas/Block'
      - $ref: '#/components/schemas/BlockRelations'
      title: BlockResult
    BlockRelations:
      properties:
        items:
          $ref: '#/components/schemas/BlockRelations_items'
        broadcast:
          $ref: '#/components/schemas/BlockRelations_broadcast'
        program:
          $ref: '#/components/schemas/BlockRelations_program'
      title: BlockRelations
      type: object
    Block:
      properties:
        id:
          description: ID of the current Block.
          example: 1
          format: int64
          type: integer
        broadcast_id:
          description: Currently assigned Broadcast connected to the current Block,
            identified by the Broadcast ID.
          example: 1
          format: int64
          type: integer
        start:
          description: Start of the Block (formatted as a DateTime object), saved
            with an TimeZone.
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        stop:
          description: End of the Block (formatted as a DateTime object), saved with
            an TimeZone.
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        created_at:
          description: Time of the creation of the Block (formatted as a DateTime
            object), saved with an TimeZone.
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        updated_at:
          description: Time of the last update of the Block (formatted as a DateTime
            object), saved with an TimeZone.
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        deleted_at:
          description: Moment when the Block got deleted (formatted as a DateTime
            object), saved with an TimeZone.
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        _external_station_id:
          format: int64
          type: integer
      required:
      - broadcast_id
      - created_at
      - deleted_at
      - id
      - start
      - stop
      - updated_at
      type: object
    BroadcastResult:
      allOf:
      - $ref: '#/components/schemas/BroadcastOutputOnly'
      - $ref: '#/components/schemas/Broadcast'
      - $ref: '#/components/schemas/BroadcastRelations'
      title: BroadcastResult
    BroadcastEPGResult:
      allOf:
      - $ref: '#/components/schemas/BroadcastOutputOnly'
      - $ref: '#/components/schemas/Broadcast'
      - $ref: '#/components/schemas/BroadcastEPGRelations'
      title: BroadcastEPGResult
    PresenterEPGResult:
      allOf:
      - $ref: '#/components/schemas/Presenter'
      - $ref: '#/components/schemas/PresenterOutputOnly'
      title: PresenterEPGResult
    BroadcastDataInput:
      allOf:
      - $ref: '#/components/schemas/Broadcast'
      - $ref: '#/components/schemas/BroadcastInputOnly'
      title: BroadcastDataInput
    BroadcastRelations:
      properties:
        genre:
          $ref: '#/components/schemas/BroadcastRelations_genre'
        items:
          $ref: '#/components/schemas/BroadcastRelations_items'
        blocks:
          $ref: '#/components/schemas/BroadcastRelations_blocks'
        program:
          $ref: '#/components/schemas/BlockRelations_program'
        tags:
          $ref: '#/components/schemas/BroadcastRelations_tags'
        presenters:
          $ref: '#/components/schemas/BroadcastRelations_presenters'
        model_type:
          $ref: '#/components/schemas/BroadcastRelations_model_type'
      title: BroadcastRelations
      type: object
    BroadcastEPGRelations:
      properties:
        items:
          $ref: '#/components/schemas/BroadcastRelations_items'
        blocks:
          $ref: '#/components/schemas/BroadcastRelations_blocks'
        program:
          $ref: '#/components/schemas/BlockRelations_program'
        tags:
          $ref: '#/components/schemas/BroadcastRelations_tags'
        presenters:
          items:
            $ref: '#/components/schemas/PresenterEPGResult'
          type: array
        model_type:
          $ref: '#/components/schemas/BroadcastRelations_model_type'
      title: BroadcastEPGRelations
      type: object
    BroadcastInputOnly:
      properties:
        tags:
          items:
            example: 1
            type: integer
          type: array
        presenters:
          items:
            example: 1
            type: integer
          type: array
      title: BroadcastInputOnly
      type: object
    BroadcastOutputOnly:
      properties:
        id:
          example: 1
          format: int64
          type: integer
        updated_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        created_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        deleted_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        _external_station_id:
          format: int64
          type: integer
      required:
      - created_at
      - deleted_at
      - id
      - updated_at
      title: BroadcastOutputOnly
      type: object
    Broadcast:
      properties:
        program_id:
          example: 1
          format: int64
          type: integer
        model_type_id:
          example: 2
          format: int64
          type: integer
        station_id:
          example: 1
          format: int64
          type: integer
        field_values:
          properties: {}
          type: object
        title:
          example: FooBar Show
          type: string
        start:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        stop:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        genre_id:
          example: 2611
          format: int64
          type: integer
        description:
          example: FooBar BarFoo
          type: string
        short_name:
          example: foobar
          type: string
        medium_name:
          example: foobarshow
          type: string
        website:
          example: http://example.com/
          type: string
        email:
          example: info@example.com
          type: string
        recommended:
          example: true
          type: boolean
        language:
          example: English
          type: string
        published:
          example: true
          type: boolean
        repetition_uid:
          example: 1234abcd
          type: string
        repetition_type:
          enum:
          - 1 week
          - 2 week
          - 4 week
          - 1 month
          example: 1 week
          type: string
        repetition_end:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        repetition_start:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        repetition_days:
          type: string
        pty_code_id:
          example: 1
          format: int64
          type: integer
      title: Broadcast
      type: object
    BroadcastEPGDay:
      example:
        day: 2016-01-11T00:00:00.000+0000
        results:
        - null
        - null
      properties:
        day:
          example: 2016-01-11
          format: date
          type: string
        results:
          items:
            $ref: '#/components/schemas/BroadcastEPGResult'
          type: array
      required:
      - results
      type: object
    EPGResults:
      example:
        days:
        - day: 2016-01-11T00:00:00.000+0000
          results:
          - null
          - null
        - day: 2016-01-11T00:00:00.000+0000
          results:
          - null
          - null
        next_page_url: https://radiomanager.pluxbox.com/api/v1/broadcasts/epg?date=2016-01-12&withunpublished=false
        prev_page_url: https://radiomanager.pluxbox.com/api/v1/broadcasts/epg?date=2016-01-10&withunpublished=false
      properties:
        days:
          items:
            $ref: '#/components/schemas/BroadcastEPGDay'
          type: array
        next_page_url:
          example: https://radiomanager.pluxbox.com/api/v1/broadcasts/epg?date=2016-01-12&withunpublished=false
          format: url
          type: string
        prev_page_url:
          example: https://radiomanager.pluxbox.com/api/v1/broadcasts/epg?date=2016-01-10&withunpublished=false
          format: url
          type: string
      required:
      - days
      - next_page_url
      - prev_page_url
      type: object
    CampaignResult:
      allOf:
      - $ref: '#/components/schemas/CampaignOutputOnly'
      - $ref: '#/components/schemas/Campaign'
      - $ref: '#/components/schemas/CampaignRelations'
      title: CampaignResult
    CampaignDataInput:
      allOf:
      - $ref: '#/components/schemas/Campaign'
      title: CampaignDataInput
    CampaignRelations:
      properties:
        items:
          $ref: '#/components/schemas/CampaignRelations_items'
        model_type:
          $ref: '#/components/schemas/BroadcastRelations_model_type'
      title: CampaignRelations
      type: object
    CampaignTemplateItem:
      allOf:
      - $ref: '#/components/schemas/CampaignTemplateItem_allOf'
      title: CampaignTemplateItem
    CampaignOutputOnly:
      properties:
        id:
          example: 1
          format: int64
          type: integer
        updated_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        created_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        deleted_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        item:
          $ref: '#/components/schemas/CampaignTemplateItem'
        _external_station_id:
          format: int64
          type: integer
      required:
      - created_at
      - deleted_at
      - id
      - updated_at
      type: object
    Campaign:
      properties:
        model_type_id:
          example: 1
          format: int64
          type: integer
        field_values:
          properties: {}
          type: object
        title:
          example: FooBar
          type: string
        start:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        stop:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        recommended:
          example: true
          type: boolean
        description:
          example: <div class=\'rm-content\'></div>\n
          type: string
      required:
      - model_type_id
      - start
      - stop
      type: object
    ContactResult:
      allOf:
      - $ref: '#/components/schemas/ContactOutputOnly'
      - $ref: '#/components/schemas/Contact'
      - $ref: '#/components/schemas/ContactRelations'
      title: ContactResult
    ContactDataInput:
      allOf:
      - $ref: '#/components/schemas/Contact'
      title: ContactDataInput
    ContactRelations:
      properties:
        tags:
          $ref: '#/components/schemas/ContactRelations_tags'
        items:
          $ref: '#/components/schemas/ContactRelations_items'
        model_type:
          $ref: '#/components/schemas/BroadcastRelations_model_type'
      required:
      - tags
      title: ContactRelations
      type: object
    ContactOutputOnly:
      description: Contact
      properties:
        id:
          example: 1
          format: int64
          type: integer
        created_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        updated_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        deleted_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        _external_station_id:
          format: int64
          type: integer
      type: object
    Contact:
      description: Contact
      properties:
        model_type_id:
          example: 1
          format: int64
          type: integer
        field_values:
          properties: {}
          type: object
        email:
          example: info@example.com
          format: email
          type: string
        firstname:
          example: Foo
          type: string
        lastname:
          example: Bar
          type: string
        phone:
          example: 035-12345678910
          type: string
      required:
      - firstname
      - lastname
      - model_type_id
      type: object
    NotFound:
      properties:
        error:
          description: Given error, describes the problem.
          example: Object not found
          type: string
        statusCode:
          description: Assigned StatusCode, is used in order to create a relationship
            between Error and Response.
          example: 404
          format: int64
          type: integer
      required:
      - error
      - statusCode
      type: object
    Forbidden:
      properties:
        error:
          description: Given error, describes the problem.
          example: No Permission for this action
          type: string
        statusCode:
          description: Assigned StatusCode, is used in order to create a relationship
            between Error and Response.
          example: 403
          format: int64
          type: integer
      required:
      - error
      - statusCode
      type: object
    UnprocessableEntity:
      properties:
        errors:
          description: A list that displays all the missing properties.
          items:
            type: string
          type: array
      required:
      - errors
      type: object
    InternalServerError:
      properties:
        error:
          description: Given error (not formatted), describes the problem.
          type: string
        statusCode:
          description: Assigned StatusCode, is used in order to create a relationship
            between Error and Response.
          example: 500
          format: int64
          type: integer
      required:
      - error
      - statusCode
      type: object
    ReadOnly:
      properties:
        error:
          description: Given error (not formatted), describes the problem.
          example: '{name} API route is read only, please use the user interface to
            add, remove or change {name}'
          type: string
        statusCode:
          description: Assigned StatusCode, is used in order to create a relationship
            between Error and Response.
          example: 405
          format: int64
          type: integer
      required:
      - error
      - statusCode
      type: object
    RelationsPlaceholder:
      properties:
        href:
          description: HREF
          format: url
          type: string
        model:
          description: MODEL
          type: string
        operation:
          description: OPERATION
          type: string
        params:
          description: PARAMS
          properties: {}
          type: object
      required:
      - href
      - model
      - operation
      - params
      type: object
    PostSuccess:
      example:
        success: success
        id: 0
      properties:
        success:
          description: Describes whatever has succeeded
          type: string
        id:
          description: ID of the newly posted object
          type: integer
      required:
      - success
      type: object
    Success:
      example:
        success: success
      properties:
        success:
          description: Describes whatever has succeeded
          type: string
      required:
      - success
      type: object
    TooManyRequests:
      properties:
        message:
          example: Too Many Attempts.
          type: string
      required:
      - message
      type: object
    GenreResult:
      allOf:
      - $ref: '#/components/schemas/Genre'
      - $ref: '#/components/schemas/GenreRelations'
      - $ref: '#/components/schemas/GenreOutputOnly'
      title: GenreResult
    Genre:
      properties:
        id:
          example: 2617
          format: int64
          type: integer
        urn:
          example: urn:tva:metadata:cs:ContentCS:2013:3.1.1.1.3
          type: string
        parent_id:
          example: 2614
          format: int64
          type: integer
        name:
          example: Chat
          type: string
      required:
      - id
      - name
      type: object
    GenreRelations:
      properties:
        broadcasts:
          $ref: '#/components/schemas/GenreRelations_broadcasts'
        programs:
          $ref: '#/components/schemas/GenreRelations_programs'
      title: GenreRelations
      type: object
    GenreOutputOnly:
      properties:
        _external_station_id:
          format: int64
          type: integer
      title: GenreOutputOnly
      type: object
    ItemResult:
      allOf:
      - $ref: '#/components/schemas/ItemOutputOnly'
      - $ref: '#/components/schemas/Item'
      - $ref: '#/components/schemas/ItemRelations'
      title: ItemResult
    ItemDataInput:
      allOf:
      - $ref: '#/components/schemas/Item'
      - $ref: '#/components/schemas/ItemInputOnly'
      title: ItemDataInput
    ItemRelations:
      properties:
        block:
          $ref: '#/components/schemas/ItemRelations_block'
        broadcast:
          $ref: '#/components/schemas/BlockRelations_broadcast'
        program:
          $ref: '#/components/schemas/ItemRelations_program'
        contacts:
          $ref: '#/components/schemas/ItemRelations_contacts'
        tags:
          $ref: '#/components/schemas/ItemRelations_tags'
        campaign:
          $ref: '#/components/schemas/ItemRelations_campaign'
        model_type:
          $ref: '#/components/schemas/BroadcastRelations_model_type'
      title: ItemRelations
      type: object
    ItemOutputOnly:
      properties:
        id:
          example: 1
          format: int64
          type: integer
        updated_at:
          example: 2017-06-23T12:00:00+02:00
          format: date-time
          type: string
        created_at:
          example: 2017-06-23T12:00:00+02:00
          format: date-time
          type: string
        deleted_at:
          example: 2017-06-23T12:00:00+02:00
          format: date-time
          type: string
        data_modified:
          example: 1
          format: int64
          type: integer
        order:
          example: 0
          format: int64
          type: integer
        templateblock_id:
          example: 1
          format: int64
          type: integer
        templateitem_id:
          example: 1
          format: int64
          type: integer
        _external_station_id:
          format: int64
          type: integer
      title: ItemOutputOnly
      type: object
    ItemInputOnly:
      properties:
        _previous_id:
          example: 1
          format: int64
          type: integer
        _before_id:
          example: 1
          format: int64
          type: integer
        contacts:
          items:
            example: 1
            type: integer
          type: array
        tags:
          items:
            example: 1
            type: integer
          type: array
      title: ItemInputOnly
      type: object
    ImportItem:
      allOf:
      - $ref: '#/components/schemas/ImportItem_allOf'
      title: ImportItem
    Item:
      allOf:
      - $ref: '#/components/schemas/Item_allOf'
      title: Item
    ModelTypeResult:
      allOf:
      - $ref: '#/components/schemas/ModelType'
      - $ref: '#/components/schemas/ModelTypeRelations'
      - $ref: '#/components/schemas/ModelTypeOutputOnly'
      title: ModelTypeResult
    ModelType:
      properties:
        id:
          example: 1
          format: int64
          type: integer
        name:
          example: FooBar
          type: string
        model:
          enum:
          - broadcast
          - program
          - item
          - campaign
          - presenter
          - contact
          - external
          example: program
          type: string
        created_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        updated_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        options:
          $ref: '#/components/schemas/ModelType_options'
        order:
          example: 0
          format: int64
          type: integer
        deleted_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
      required:
      - id
      title: ModelType
      type: object
    ModelTypeRelations:
      properties:
        campaigns:
          $ref: '#/components/schemas/ModelTypeRelations_campaigns'
        broadcasts:
          $ref: '#/components/schemas/ModelTypeRelations_broadcasts'
        programs:
          $ref: '#/components/schemas/ModelTypeRelations_programs'
        contacts:
          $ref: '#/components/schemas/ModelTypeRelations_contacts'
        presenters:
          $ref: '#/components/schemas/ModelTypeRelations_presenters'
        items:
          $ref: '#/components/schemas/ModelTypeRelations_items'
      title: ModelTypeRelations
      type: object
    ModelTypeOutputOnly:
      properties:
        _external_station_id:
          format: int64
          type: integer
      title: ModelTypeOutputOnly
      type: object
    PresenterResult:
      allOf:
      - $ref: '#/components/schemas/PresenterOutputOnly'
      - $ref: '#/components/schemas/Presenter'
      - $ref: '#/components/schemas/PresenterRelations'
      title: PresenterResult
    PresenterDataInput:
      allOf:
      - $ref: '#/components/schemas/Presenter'
      title: PresenterDataInput
    PresenterRelations:
      properties:
        programs:
          $ref: '#/components/schemas/PresenterRelations_programs'
        broadcasts:
          $ref: '#/components/schemas/PresenterRelations_broadcasts'
        model_type:
          $ref: '#/components/schemas/BroadcastRelations_model_type'
      type: object
    PresenterOutputOnly:
      properties:
        id:
          example: 1
          format: int64
          type: integer
        updated_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        created_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        deleted_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        _external_station_id:
          format: int64
          type: integer
      required:
      - created_at
      - deleted_at
      - id
      - updated_at
      type: object
    Presenter:
      properties:
        model_type_id:
          example: 1
          format: int64
          type: integer
        field_values:
          properties: {}
          type: object
        firstname:
          example: Foo
          type: string
        lastname:
          example: Bar
          type: string
        active:
          example: true
          type: boolean
        name:
          example: FooBar
          type: string
      required:
      - model_type_id
      type: object
    ProgramResult:
      allOf:
      - $ref: '#/components/schemas/ProgramOutputOnly'
      - $ref: '#/components/schemas/Program'
      - $ref: '#/components/schemas/ProgramRelations'
      title: ProgramResult
    ProgramDataInput:
      allOf:
      - $ref: '#/components/schemas/Program'
      - $ref: '#/components/schemas/ProgramInputOnly'
      title: ProgramResult
    ProgramRelations:
      properties:
        genre:
          $ref: '#/components/schemas/BroadcastRelations_genre'
        items:
          $ref: '#/components/schemas/ProgramRelations_items'
        blocks:
          $ref: '#/components/schemas/ProgramRelations_blocks'
        broadcasts:
          $ref: '#/components/schemas/ProgramRelations_broadcasts'
        presenters:
          $ref: '#/components/schemas/ProgramRelations_presenters'
        tags:
          $ref: '#/components/schemas/ProgramRelations_tags'
        model_type:
          $ref: '#/components/schemas/BroadcastRelations_model_type'
      type: object
    ProgramInputOnly:
      allOf:
      - $ref: '#/components/schemas/ProgramInputOnly_allOf'
    ProgramOutputOnly:
      properties:
        id:
          example: 1
          format: int64
          type: integer
        updated_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        created_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        deleted_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        _external_station_id:
          format: int64
          type: integer
      required:
      - created_at
      - deleted_at
      - id
      - updated_at
      type: object
    Program:
      properties:
        model_type_id:
          example: 1
          format: int64
          type: integer
        field_values:
          properties: {}
          type: object
        title:
          example: FooBar
          type: string
        disabled:
          example: false
          type: boolean
        genre_id:
          example: 1
          format: int64
          type: integer
        description:
          type: string
        short_name:
          example: Foo
          type: string
        medium_name:
          example: FooBar
          type: string
        website:
          example: http://example.com/
          type: string
        email:
          example: info@example.com
          type: string
        recommended:
          example: false
          type: boolean
        language:
          example: English
          type: string
        pty_code_id:
          example: 1
          format: int64
          type: integer
      required:
      - model_type_id
      - title
      type: object
    StationResult:
      example:
        station:
          logo_rectangle: none
          keywords:
          - keywords
          - keywords
          pty_type: rds
          timezone: Europe/Amsterdam
          created_at: 2016-01-11T22:01:11+02:00
          description: description
          language: Dutch
          medium_name: stationname
          pay_off: none
          pty_code: 10
          genre_id: 3571
          updated_at: 2016-01-11T22:01:11+02:00
          sms: "00313552222222"
          logo_600x600: none
          station_key: none
          id: 1
          metadataradio_organisation: my organisation
          email: station@name.com
          start_days:
            sunday: 6:00
            saturday: 6:00
            tuesday: 6:00
            wednesday: 6:00
            thursday: 6:00
            friday: 6:00
            monday: 6:00
          website: none
          system_name: stationname
          active: true
          telephone: "00313552222222"
          logo_128x128: none
          name: stationname
          logo_320x320: none
          short_name: stationname
          metadataradio_station_id: "1"
      properties:
        station:
          $ref: '#/components/schemas/StationResult_station'
      title: StationResult
      type: object
    StoryResult:
      allOf:
      - $ref: '#/components/schemas/StoryOutputOnly'
      - $ref: '#/components/schemas/Story'
      - $ref: '#/components/schemas/StoryRelations'
      title: StoryResult
    StoryDataInput:
      allOf:
      - $ref: '#/components/schemas/Story'
      - $ref: '#/components/schemas/StoryInputOnly'
      title: StoryDataInput
    StoryRelations:
      properties:
        tags:
          $ref: '#/components/schemas/StoryRelations_tags'
        items:
          $ref: '#/components/schemas/StoryRelations_items'
        model_type:
          $ref: '#/components/schemas/BroadcastRelations_model_type'
      required:
      - tags
      title: StoryRelations
      type: object
    StoryInputOnly:
      allOf:
      - $ref: '#/components/schemas/StoryInputOnly_allOf'
    StoryOutputOnly:
      description: Story
      properties:
        id:
          example: 1
          format: int64
          type: integer
        created_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        updated_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        deleted_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        _external_station_id:
          format: int64
          type: integer
      type: object
    Story:
      description: Story
      properties:
        model_type_id:
          example: 1
          format: int64
          type: integer
        recommended:
          example: true
          type: boolean
        field_values:
          properties: {}
          type: object
        name:
          example: Foo Story
          type: string
        description:
          example: <div class="rm-content">Details of story</div>\n
          type: string
      required:
      - model_type_id
      - name
      type: object
    TagResult:
      allOf:
      - $ref: '#/components/schemas/TagOutputOnly'
      - $ref: '#/components/schemas/Tag'
      - $ref: '#/components/schemas/TagRelations'
      title: TagResult
    Tag:
      properties:
        name:
          example: FooBar
          type: string
      required:
      - name
      type: object
    TagDataInput:
      allOf:
      - $ref: '#/components/schemas/Tag'
    TagOutputOnly:
      properties:
        id:
          example: 1
          format: int64
          type: integer
        created_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        updated_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        deleted_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        _external_station_id:
          format: int64
          type: integer
      required:
      - id
      type: object
    TagRelations:
      properties:
        broadcasts:
          $ref: '#/components/schemas/TagRelations_broadcasts'
        programs:
          $ref: '#/components/schemas/TagRelations_programs'
        contacts:
          $ref: '#/components/schemas/TagRelations_contacts'
        items:
          $ref: '#/components/schemas/TagRelations_items'
      title: TagRelations
      type: object
    TextString:
      example:
        updated_at: 2016-01-11T22:01:11+02:00
        name: name
        created_at: 2016-01-11T22:01:11+02:00
        id: 1
        content: content
      properties:
        id:
          example: 1
          format: int64
          type: integer
        content:
          type: string
        name:
          type: string
        created_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        updated_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
      required:
      - content
      - id
      - name
      type: object
    UserResult:
      example:
        settings:
          showSideBar: true
          showSpeechTime: true
          showTimeColumn: true
          showCheckboxColumn: true
          showSocialBar: true
          zoomFactor: 50
        firstname: Foo
        updated_at: 2016-01-11T22:01:11+02:00
        phone: 036-12345678910
        active_external_station_id: 1
        roles:
        - model: Role
          href: https://radiomanager.pluxbox.com/api/v2/roles/2
          params: 2
          operation: getRoleById
        - model: Role
          href: https://radiomanager.pluxbox.com/api/v2/roles/2
          params: 2
          operation: getRoleById
        created_at: 2016-01-11T22:01:11+02:00
        active: true
        language: false
        id: 1
        email: info@example.com
        lastname: Bar
      properties:
        id:
          example: 1
          format: int64
          type: integer
        email:
          example: info@example.com
          format: email
          type: string
        firstname:
          example: Foo
          type: string
        lastname:
          example: Bar
          type: string
        phone:
          example: 036-12345678910
          type: string
        created_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        updated_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        active:
          example: true
          type: boolean
        settings:
          $ref: '#/components/schemas/UserResult_settings'
        language:
          example: false
          type: boolean
        active_external_station_id:
          example: 1
          format: int64
          type: integer
        roles:
          items:
            $ref: '#/components/schemas/UserResult_roles'
          type: array
      required:
      - email
      - firstname
      - id
      - lastname
      title: UserResult
      type: object
    InviteUserData:
      example:
        email: info@example.com
        role_ids:
        - 1
        - 1
      properties:
        email:
          example: info@example.com
          format: email
          type: string
        role_ids:
          items:
            example: 1
            type: integer
          type: array
      required:
      - email
      - role_ids
      type: object
    VisualResult:
      example:
        value: BASE64STRING
      properties:
        value:
          example: BASE64STRING
          format: base64
          type: string
      title: VisualResult
      type: object
    BlockResults:
      example:
        path: /api/v2/blocks
        per_page: 50
        total: 1
        last_page: 1
        next_page_url: /blocks
        from: 1
        to: 1
        prev_page_url: /blocks
        results:
        - null
        - null
        current_page: 1
      properties:
        current_page:
          example: 1
          format: int64
          type: integer
        from:
          example: 1
          format: int64
          type: integer
        last_page:
          example: 1
          format: int64
          type: integer
        next_page_url:
          example: /blocks
          type: string
        path:
          example: /api/v2/blocks
          type: string
        per_page:
          example: 50
          format: int64
          type: integer
        prev_page_url:
          example: /blocks
          type: string
        to:
          example: 1
          format: int64
          type: integer
        total:
          example: 1
          format: int64
          type: integer
        results:
          items:
            $ref: '#/components/schemas/BlockResult'
          type: array
    BroadcastResults:
      example:
        path: /api/v2/broadcasts
        per_page: 50
        total: 1
        last_page: 1
        next_page_url: /broadcasts
        from: 1
        to: 1
        prev_page_url: /broadcasts
        results:
        - null
        - null
        current_page: 1
      properties:
        current_page:
          example: 1
          format: int64
          type: integer
        from:
          example: 1
          format: int64
          type: integer
        last_page:
          example: 1
          format: int64
          type: integer
        next_page_url:
          example: /broadcasts
          type: string
        path:
          example: /api/v2/broadcasts
          type: string
        per_page:
          example: 50
          format: int64
          type: integer
        prev_page_url:
          example: /broadcasts
          type: string
        to:
          example: 1
          format: int64
          type: integer
        total:
          example: 1
          format: int64
          type: integer
        results:
          items:
            $ref: '#/components/schemas/BroadcastResult'
          type: array
    CampaignResults:
      example:
        path: /api/v2/campaigns
        per_page: 50
        total: 1
        last_page: 1
        next_page_url: /campaigns
        from: 1
        to: 1
        prev_page_url: /campaigns
        results:
        - null
        - null
        current_page: 1
      properties:
        current_page:
          example: 1
          format: int64
          type: integer
        from:
          example: 1
          format: int64
          type: integer
        last_page:
          example: 1
          format: int64
          type: integer
        next_page_url:
          example: /campaigns
          type: string
        path:
          example: /api/v2/campaigns
          type: string
        per_page:
          example: 50
          format: int64
          type: integer
        prev_page_url:
          example: /campaigns
          type: string
        to:
          example: 1
          format: int64
          type: integer
        total:
          example: 1
          format: int64
          type: integer
        results:
          items:
            $ref: '#/components/schemas/CampaignResult'
          type: array
    ContactResults:
      example:
        path: /api/v2/contacts
        per_page: 50
        total: 1
        last_page: 1
        next_page_url: /contacts
        from: 1
        to: 1
        prev_page_url: /contacts
        results:
        - null
        - null
        current_page: 1
      properties:
        current_page:
          example: 1
          format: int64
          type: integer
        from:
          example: 1
          format: int64
          type: integer
        last_page:
          example: 1
          format: int64
          type: integer
        next_page_url:
          example: /contacts
          type: string
        path:
          example: /api/v2/contacts
          type: string
        per_page:
          example: 50
          format: int64
          type: integer
        prev_page_url:
          example: /contacts
          type: string
        to:
          example: 1
          format: int64
          type: integer
        total:
          example: 1
          format: int64
          type: integer
        results:
          items:
            $ref: '#/components/schemas/ContactResult'
          type: array
    GenreResults:
      example:
        path: /api/v2/genres
        per_page: 50
        total: 1
        last_page: 1
        next_page_url: /genres
        from: 1
        to: 1
        prev_page_url: /genres
        results:
        - null
        - null
        current_page: 1
      properties:
        current_page:
          example: 1
          format: int64
          type: integer
        from:
          example: 1
          format: int64
          type: integer
        last_page:
          example: 1
          format: int64
          type: integer
        next_page_url:
          example: /genres
          type: string
        path:
          example: /api/v2/genres
          type: string
        per_page:
          example: 50
          format: int64
          type: integer
        prev_page_url:
          example: /genres
          type: string
        to:
          example: 1
          format: int64
          type: integer
        total:
          example: 1
          format: int64
          type: integer
        results:
          items:
            $ref: '#/components/schemas/GenreResult'
          type: array
    ItemResults:
      example:
        path: /api/v2/items
        per_page: 50
        total: 1
        last_page: 1
        next_page_url: /items
        from: 1
        to: 1
        results:
        - null
        - null
        current_page: 1
      properties:
        current_page:
          example: 1
          format: int64
          readOnly: true
          type: integer
        from:
          example: 1
          format: int64
          readOnly: true
          type: integer
        last_page:
          example: 1
          format: int64
          readOnly: true
          type: integer
        next_page_url:
          example: /items
          readOnly: true
          type: string
        path:
          example: /api/v2/items
          readOnly: true
          type: string
        per_page:
          example: 50
          format: int64
          readOnly: true
          type: integer
        to:
          example: 1
          format: int64
          readOnly: true
          type: integer
        total:
          example: 1
          format: int64
          readOnly: true
          type: integer
        results:
          items:
            $ref: '#/components/schemas/ItemResult'
          type: array
    inline_object:
      properties:
        start:
          example: 2017-06-23T12:00:00+02:00
          format: date-time
          type: string
        allow_playlist_past:
          example: 0
          type: integer
        items:
          items:
            $ref: '#/components/schemas/ImportItem'
          type: array
      type: object
    inline_response_202:
      example:
        success: true
      properties:
        success:
          example: true
          type: boolean
    inline_object_1:
      properties:
        start:
          example: 2017-06-23T12:00:00+02:00
          format: date-time
          type: string
        allow_playlist_past:
          example: 0
          type: integer
        items:
          items:
            $ref: '#/components/schemas/ImportItem'
          type: array
      type: object
    inline_object_2:
      properties:
        start:
          example: 2017-06-23T12:00:00+02:00
          format: date-time
          type: string
        allow_playlist_past:
          example: 0
          type: integer
        before_id:
          example: 0
          type: integer
        previous_id:
          example: 0
          type: integer
        items:
          items:
            $ref: '#/components/schemas/ImportItem'
          type: array
      type: object
    inline_object_3:
      properties:
        id:
          example: 1
          type: integer
      type: object
    ModelTypeResults:
      example:
        path: /api/v2/model_types
        per_page: 50
        total: 1
        last_page: 1
        next_page_url: /model_types
        from: 1
        to: 1
        prev_page_url: /model_types
        results:
        - null
        - null
        current_page: 1
      properties:
        current_page:
          example: 1
          format: int64
          type: integer
        from:
          example: 1
          format: int64
          type: integer
        last_page:
          example: 1
          format: int64
          type: integer
        next_page_url:
          example: /model_types
          type: string
        path:
          example: /api/v2/model_types
          type: string
        per_page:
          example: 50
          format: int64
          type: integer
        prev_page_url:
          example: /model_types
          type: string
        to:
          example: 1
          format: int64
          type: integer
        total:
          example: 1
          format: int64
          type: integer
        results:
          items:
            $ref: '#/components/schemas/ModelTypeResult'
          type: array
    PresenterResults:
      example:
        path: /api/v2/presenters
        per_page: 50
        total: 1
        last_page: 1
        next_page_url: /presenters
        from: 1
        to: 1
        prev_page_url: /presenters
        results:
        - null
        - null
        current_page: 1
      properties:
        current_page:
          example: 1
          format: int64
          type: integer
        from:
          example: 1
          format: int64
          type: integer
        last_page:
          example: 1
          format: int64
          type: integer
        next_page_url:
          example: /presenters
          type: string
        path:
          example: /api/v2/presenters
          type: string
        per_page:
          example: 50
          format: int64
          type: integer
        prev_page_url:
          example: /presenters
          type: string
        to:
          example: 1
          format: int64
          type: integer
        total:
          example: 1
          format: int64
          type: integer
        results:
          items:
            $ref: '#/components/schemas/PresenterResult'
          type: array
    ProgramResults:
      example:
        path: /api/v2/programs
        per_page: 50
        total: 1
        last_page: 1
        next_page_url: /programs
        from: 1
        to: 1
        prev_page_url: /programs
        results:
        - null
        - null
        current_page: 1
      properties:
        current_page:
          example: 1
          format: int64
          type: integer
        from:
          example: 1
          format: int64
          type: integer
        last_page:
          example: 1
          format: int64
          type: integer
        next_page_url:
          example: /programs
          type: string
        path:
          example: /api/v2/programs
          type: string
        per_page:
          example: 50
          format: int64
          type: integer
        prev_page_url:
          example: /programs
          type: string
        to:
          example: 1
          format: int64
          type: integer
        total:
          example: 1
          format: int64
          type: integer
        results:
          items:
            $ref: '#/components/schemas/ProgramResult'
          type: array
    StoryResults:
      example:
        path: /api/v2/stories
        per_page: 50
        total: 1
        last_page: 1
        next_page_url: /stories
        from: 1
        to: 1
        prev_page_url: /stories
        results:
        - null
        - null
        current_page: 1
      properties:
        current_page:
          example: 1
          format: int64
          type: integer
        from:
          example: 1
          format: int64
          type: integer
        last_page:
          example: 1
          format: int64
          type: integer
        next_page_url:
          example: /stories
          type: string
        path:
          example: /api/v2/stories
          type: string
        per_page:
          example: 50
          format: int64
          type: integer
        prev_page_url:
          example: /stories
          type: string
        to:
          example: 1
          format: int64
          type: integer
        total:
          example: 1
          format: int64
          type: integer
        results:
          items:
            $ref: '#/components/schemas/StoryResult'
          type: array
    TagResults:
      example:
        path: /api/v2/tags
        per_page: 50
        total: 1
        last_page: 1
        next_page_url: /tags
        from: 1
        to: 1
        results:
        - null
        - null
        current_page: 1
      properties:
        current_page:
          example: 1
          format: int64
          readOnly: true
          type: integer
        from:
          example: 1
          format: int64
          readOnly: true
          type: integer
        last_page:
          example: 1
          format: int64
          readOnly: true
          type: integer
        next_page_url:
          example: /tags
          readOnly: true
          type: string
        path:
          example: /api/v2/tags
          readOnly: true
          type: string
        per_page:
          example: 50
          format: int64
          readOnly: true
          type: integer
        to:
          example: 1
          format: int64
          readOnly: true
          type: integer
        total:
          example: 1
          format: int64
          readOnly: true
          type: integer
        results:
          items:
            $ref: '#/components/schemas/TagResult'
          type: array
    UserResults:
      example:
        path: /api/v2/users
        per_page: 50
        total: 1
        last_page: 1
        next_page_url: /users
        from: 1
        to: 1
        prev_page_url: /users
        results:
        - settings:
            showSideBar: true
            showSpeechTime: true
            showTimeColumn: true
            showCheckboxColumn: true
            showSocialBar: true
            zoomFactor: 50
          firstname: Foo
          updated_at: 2016-01-11T22:01:11+02:00
          phone: 036-12345678910
          active_external_station_id: 1
          roles:
          - model: Role
            href: https://radiomanager.pluxbox.com/api/v2/roles/2
            params: 2
            operation: getRoleById
          - model: Role
            href: https://radiomanager.pluxbox.com/api/v2/roles/2
            params: 2
            operation: getRoleById
          created_at: 2016-01-11T22:01:11+02:00
          active: true
          language: false
          id: 1
          email: info@example.com
          lastname: Bar
        - settings:
            showSideBar: true
            showSpeechTime: true
            showTimeColumn: true
            showCheckboxColumn: true
            showSocialBar: true
            zoomFactor: 50
          firstname: Foo
          updated_at: 2016-01-11T22:01:11+02:00
          phone: 036-12345678910
          active_external_station_id: 1
          roles:
          - model: Role
            href: https://radiomanager.pluxbox.com/api/v2/roles/2
            params: 2
            operation: getRoleById
          - model: Role
            href: https://radiomanager.pluxbox.com/api/v2/roles/2
            params: 2
            operation: getRoleById
          created_at: 2016-01-11T22:01:11+02:00
          active: true
          language: false
          id: 1
          email: info@example.com
          lastname: Bar
        current_page: 1
      properties:
        current_page:
          example: 1
          format: int64
          type: integer
        from:
          example: 1
          format: int64
          type: integer
        last_page:
          example: 1
          format: int64
          type: integer
        next_page_url:
          example: /users
          type: string
        path:
          example: /api/v2/users
          type: string
        per_page:
          example: 50
          format: int64
          type: integer
        prev_page_url:
          example: /users
          type: string
        to:
          example: 1
          format: int64
          type: integer
        total:
          example: 1
          format: int64
          type: integer
        results:
          items:
            $ref: '#/components/schemas/UserResult'
          type: array
    BlockRelations_items_params:
      properties:
        block_id:
          example: 1
          type: integer
    BlockRelations_items:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/items?block_id=1
          format: url
          type: string
        model:
          example: Item
          type: string
        operation:
          example: listItems
          type: string
        params:
          $ref: '#/components/schemas/BlockRelations_items_params'
    BlockRelations_broadcast_params:
      properties:
        id:
          example: 1
          type: integer
    BlockRelations_broadcast:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/broadcasts/1
          type: string
        model:
          example: Broadcast
          type: string
        operation:
          example: listBroadcasts
          type: string
        params:
          $ref: '#/components/schemas/BlockRelations_broadcast_params'
    BlockRelations_program:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/programs/1
          type: string
        model:
          example: Program
          type: string
        operation:
          example: ProgramById
          type: string
        params:
          $ref: '#/components/schemas/BlockRelations_broadcast_params'
    BroadcastRelations_genre:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/genres/1
          format: url
          type: string
        model:
          example: Genre
          type: string
        operation:
          example: getGenreById
          type: string
        params:
          $ref: '#/components/schemas/BlockRelations_broadcast_params'
    BroadcastRelations_items_params:
      properties:
        broadcast_id:
          example: 1
          type: integer
    BroadcastRelations_items:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/items?broadcast_id=1
          format: url
          type: string
        model:
          example: Item
          type: string
        operation:
          example: listItems
          type: string
        params:
          $ref: '#/components/schemas/BroadcastRelations_items_params'
    BroadcastRelations_blocks:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/blocks?broadcast_id=1
          format: url
          type: string
        model:
          example: Block
          type: string
        operation:
          example: getBlockById
          type: string
        params:
          $ref: '#/components/schemas/BroadcastRelations_items_params'
    BroadcastRelations_tags:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/tags?broadcast_id=1
          type: string
        model:
          example: Tag
          type: string
        operation:
          example: listTags
          type: string
        params:
          $ref: '#/components/schemas/BroadcastRelations_items_params'
    BroadcastRelations_presenters:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/presenters?broadcast_id=1
          type: string
        model:
          example: Presenter
          type: string
        operation:
          example: listPresenters
          type: string
        params:
          $ref: '#/components/schemas/BroadcastRelations_items_params'
    BroadcastRelations_model_type:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/model_types/1
          type: string
        model:
          example: ModelType
          type: string
        operation:
          example: getModelTypeById
          type: string
        params:
          $ref: '#/components/schemas/BlockRelations_broadcast_params'
    CampaignRelations_items_params:
      properties:
        campaign_id:
          example: 1
          type: integer
    CampaignRelations_items:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/items?campaign_id=1
          type: string
        model:
          example: Item
          type: string
        operation:
          example: listItems
          type: string
        params:
          $ref: '#/components/schemas/CampaignRelations_items_params'
    CampaignTemplateItem_allOf:
      properties:
        model_type_id:
          example: 14
          format: int64
          type: integer
        external_id:
          example: "0"
          type: string
        field_values:
          properties: {}
          type: object
        title:
          example: FooBar Show
          type: string
        duration:
          example: 120
          format: int64
          type: integer
        recommended:
          example: false
          type: boolean
        static_start:
          example: false
          type: boolean
        _deltas:
          properties: {}
          type: object
    ContactRelations_tags_params:
      properties:
        contact_id:
          example: 1
          type: integer
    ContactRelations_tags:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/tags?contact_id=1
          type: string
        model:
          example: Tag
          type: string
        operation:
          example: listTags
          type: string
        params:
          $ref: '#/components/schemas/ContactRelations_tags_params'
    ContactRelations_items:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/items?contact_id=1
          format: url
          type: string
        model:
          example: Item
          type: string
        operation:
          example: listItems
          type: string
        params:
          $ref: '#/components/schemas/ContactRelations_tags_params'
    GenreRelations_broadcasts_params:
      properties:
        genre_id:
          example: 1
          type: integer
    GenreRelations_broadcasts:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/broadcasts?genre_id=1
          format: url
          type: string
        model:
          example: Broadcasts
          type: string
        operation:
          example: listBroadcasts
          type: string
        params:
          $ref: '#/components/schemas/GenreRelations_broadcasts_params'
    GenreRelations_programs:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/programs?genre_id=1
          format: url
          type: string
        model:
          example: Programs
          type: string
        operation:
          example: listPrograms
          type: string
        params:
          $ref: '#/components/schemas/GenreRelations_broadcasts_params'
    ItemRelations_block:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/blocks/1
          format: url
          type: string
        model:
          example: Block
          type: string
        operation:
          example: getBlockById
          type: string
        params:
          $ref: '#/components/schemas/BlockRelations_broadcast_params'
    ItemRelations_program:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/program/1
          type: string
        model:
          example: Program
          type: string
        operation:
          example: listPrograms
          type: string
        params:
          $ref: '#/components/schemas/BlockRelations_broadcast_params'
    ItemRelations_contacts_params:
      properties:
        item_id:
          example: 1
          type: integer
    ItemRelations_contacts:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/contacts?item_id=1
          type: string
        model:
          example: Contact
          type: string
        operation:
          example: listContacts
          type: string
        params:
          $ref: '#/components/schemas/ItemRelations_contacts_params'
    ItemRelations_tags:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/tags?item_id=1
          type: string
        model:
          example: Tag
          type: string
        operation:
          example: listTags
          type: string
        params:
          $ref: '#/components/schemas/ItemRelations_contacts_params'
    ItemRelations_campaign:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/campaigns/1
          type: string
        model:
          example: Campaign
          type: string
        operation:
          example: listCampaigns
          type: string
        params:
          $ref: '#/components/schemas/BlockRelations_broadcast_params'
    ImportItem_allOf:
      properties:
        model_type_id:
          example: 14
          format: int64
          type: integer
        external_id:
          example: "0"
          type: string
        field_values:
          properties: {}
          type: object
        title:
          example: FooBar Show
          type: string
        duration:
          example: 120
          format: int64
          type: integer
        start:
          example: 2017-06-23T12:00:00+02:00
          format: date-time
          type: string
        recommended:
          example: false
          type: boolean
        static_start:
          example: false
          type: boolean
        details:
          example: <div class="rm-content">Details of item</div>\n
          type: string
        contacts:
          items:
            example: 1
            type: integer
          type: array
        tags:
          items:
            example: 1
            type: integer
          type: array
      required:
      - external_id
      - model_type_id
    Item_allOf:
      properties:
        model_type_id:
          example: 14
          format: int64
          type: integer
        block_id:
          example: 1
          format: int64
          type: integer
        external_id:
          example: "0"
          type: string
        field_values:
          properties: {}
          type: object
        title:
          example: FooBar Show
          type: string
        duration:
          example: 120
          format: int64
          type: integer
        start:
          example: 2017-06-23T12:00:00+02:00
          format: date-time
          type: string
        status:
          enum:
          - scheduled
          - playing
          - played
          example: scheduled
          type: string
        import:
          example: 0
          format: int64
          type: integer
        campaign_id:
          example: 1
          format: int64
          type: integer
        recommended:
          example: false
          type: boolean
        station_draft_id:
          example: 0
          format: int64
          type: integer
        program_draft_id:
          example: 0
          format: int64
          type: integer
        user_draft_id:
          example: 0
          format: int64
          type: integer
        static_start:
          example: false
          type: boolean
        details:
          example: <div class="rm-content">Details of item</div>\n
          type: string
      required:
      - model_type_id
    ModelType_options:
      properties:
        color:
          example: '#FFFFFF'
          type: string
        subBroadcast:
          example: true
          type: boolean
    ModelTypeRelations_campaigns_params:
      properties:
        model_type_id:
          example: 1
          type: integer
    ModelTypeRelations_campaigns:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/campaigns/model_type_id=1
          format: url
          type: string
        model:
          example: Campaign
          type: string
        operation:
          example: getCampaignList
          type: string
        params:
          $ref: '#/components/schemas/ModelTypeRelations_campaigns_params'
    ModelTypeRelations_broadcasts:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/broadcasts?model_type_id=1
          type: string
        model:
          example: Broadcast
          type: string
        operation:
          example: listBroadcasts
          type: string
        params:
          $ref: '#/components/schemas/ModelTypeRelations_campaigns_params'
    ModelTypeRelations_programs:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/programs?model_type_id=1
          type: string
        model:
          example: Program
          type: string
        operation:
          example: listPrograms
          type: string
        params:
          $ref: '#/components/schemas/ModelTypeRelations_campaigns_params'
    ModelTypeRelations_contacts:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/contacts?model_type_id=1
          type: string
        model:
          example: Contact
          type: string
        operation:
          example: listContacts
          type: string
        params:
          $ref: '#/components/schemas/ModelTypeRelations_campaigns_params'
    ModelTypeRelations_presenters:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/presenters?model_type_id
          type: string
        model:
          example: Presenter
          type: string
        operation:
          example: listPresenters
          type: string
        params:
          $ref: '#/components/schemas/ModelTypeRelations_campaigns_params'
    ModelTypeRelations_items:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/items?model_type_id=1
          type: string
        model:
          example: Item
          type: string
        operation:
          example: listItems
          type: string
        params:
          $ref: '#/components/schemas/ModelTypeRelations_campaigns_params'
    PresenterRelations_programs_params:
      properties:
        presenter_id:
          example: 1
          type: integer
    PresenterRelations_programs:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/programs?presenter_id=1
          type: string
        model:
          example: Program
          type: string
        operation:
          example: listPrograms
          type: string
        params:
          $ref: '#/components/schemas/PresenterRelations_programs_params'
    PresenterRelations_broadcasts:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/broadcasts?presenter_id=1
          type: string
        model:
          example: Broadcast
          type: string
        operation:
          example: ListBroadcasts
          type: string
        params:
          $ref: '#/components/schemas/PresenterRelations_programs_params'
    ProgramRelations_items_params:
      properties:
        program_id:
          example: 1
          type: integer
    ProgramRelations_items:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/items?program_id=1
          format: url
          type: string
        model:
          example: Item
          type: string
        operation:
          example: listItems
          type: string
        params:
          $ref: '#/components/schemas/ProgramRelations_items_params'
    ProgramRelations_blocks:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/blocks?program_id=1
          format: url
          type: string
        model:
          example: Block
          type: string
        operation:
          example: getBlockById
          type: string
        params:
          $ref: '#/components/schemas/ProgramRelations_items_params'
    ProgramRelations_broadcasts:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/broadcasts?program_id=1
          type: string
        model:
          example: Broadcast
          type: string
        operation:
          example: listBroadcasts
          type: string
        params:
          $ref: '#/components/schemas/ProgramRelations_items_params'
    ProgramRelations_presenters:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/presenters?program_id=1
          type: string
        model:
          example: Presenter
          type: string
        operation:
          example: listPresenters
          type: string
        params:
          $ref: '#/components/schemas/ProgramRelations_items_params'
    ProgramRelations_tags:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/tags?program_id=1
          type: string
        model:
          example: Tag
          type: string
        operation:
          example: listTags
          type: string
        params:
          $ref: '#/components/schemas/ProgramRelations_items_params'
    ProgramInputOnly_allOf:
      properties:
        tags:
          items:
            example: 1
            type: integer
          type: array
        presenters:
          items:
            example: 1
            type: integer
          type: array
    StationResult_station_start_days:
      example:
        sunday: 6:00
        saturday: 6:00
        tuesday: 6:00
        wednesday: 6:00
        thursday: 6:00
        friday: 6:00
        monday: 6:00
      properties:
        monday:
          example: 6:00
          type: string
        tuesday:
          example: 6:00
          type: string
        wednesday:
          example: 6:00
          type: string
        thursday:
          example: 6:00
          type: string
        friday:
          example: 6:00
          type: string
        saturday:
          example: 6:00
          type: string
        sunday:
          example: 6:00
          type: string
    StationResult_station:
      example:
        logo_rectangle: none
        keywords:
        - keywords
        - keywords
        pty_type: rds
        timezone: Europe/Amsterdam
        created_at: 2016-01-11T22:01:11+02:00
        description: description
        language: Dutch
        medium_name: stationname
        pay_off: none
        pty_code: 10
        genre_id: 3571
        updated_at: 2016-01-11T22:01:11+02:00
        sms: "00313552222222"
        logo_600x600: none
        station_key: none
        id: 1
        metadataradio_organisation: my organisation
        email: station@name.com
        start_days:
          sunday: 6:00
          saturday: 6:00
          tuesday: 6:00
          wednesday: 6:00
          thursday: 6:00
          friday: 6:00
          monday: 6:00
        website: none
        system_name: stationname
        active: true
        telephone: "00313552222222"
        logo_128x128: none
        name: stationname
        logo_320x320: none
        short_name: stationname
        metadataradio_station_id: "1"
      properties:
        id:
          example: 1
          type: integer
        name:
          example: stationname
          type: string
        created_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        updated_at:
          example: 2016-01-11T22:01:11+02:00
          format: date-time
          type: string
        system_name:
          example: stationname
          type: string
        short_name:
          example: stationname
          type: string
        medium_name:
          example: stationname
          type: string
        website:
          example: none
          type: string
        email:
          example: station@name.com
          type: string
        keywords:
          items:
            type: string
          type: array
        description:
          example: description
          type: string
        sms:
          example: "00313552222222"
          type: string
        telephone:
          example: "00313552222222"
          type: string
        genre_id:
          example: 3571
          type: integer
        language:
          example: Dutch
          type: string
        active:
          example: true
          type: boolean
        logo_rectangle:
          example: none
          type: string
        logo_128x128:
          example: none
          type: string
        logo_320x320:
          example: none
          type: string
        logo_600x600:
          example: none
          type: string
        pay_off:
          example: none
          type: string
        pty_code:
          example: 10
          type: integer
        pty_type:
          example: rds
          type: string
        station_key:
          example: none
          type: string
        timezone:
          example: Europe/Amsterdam
          type: string
        metadataradio_organisation:
          example: my organisation
          type: string
        metadataradio_station_id:
          example: "1"
          type: string
        start_days:
          $ref: '#/components/schemas/StationResult_station_start_days'
    StoryRelations_tags_params:
      properties:
        story_id:
          example: 1
          type: integer
    StoryRelations_tags:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/tags?story_id=1
          type: string
        model:
          example: Tag
          type: string
        operation:
          example: listTags
          type: string
        params:
          $ref: '#/components/schemas/StoryRelations_tags_params'
    StoryRelations_items:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/items?story_id=1
          format: url
          type: string
        model:
          example: Item
          type: string
        operation:
          example: listItems
          type: string
        params:
          $ref: '#/components/schemas/StoryRelations_tags_params'
    StoryInputOnly_allOf:
      properties:
        tags:
          items:
            example: 1
            type: integer
          type: array
    TagRelations_broadcasts_params:
      properties:
        tag_id:
          example: 1
          type: integer
    TagRelations_broadcasts:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/broadcasts?tag_id=1
          type: string
        model:
          example: Broadcast
          type: string
        operation:
          example: listBroadcasts
          type: string
        params:
          $ref: '#/components/schemas/TagRelations_broadcasts_params'
    TagRelations_programs:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/programs?tag_id=1
          type: string
        model:
          example: Program
          type: string
        operation:
          example: listPrograms
          type: string
        params:
          $ref: '#/components/schemas/TagRelations_broadcasts_params'
    TagRelations_contacts:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/contacts?tag_id=1
          type: string
        model:
          example: Contact
          type: string
        operation:
          example: listContacts
          type: string
        params:
          $ref: '#/components/schemas/TagRelations_broadcasts_params'
    TagRelations_items:
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/items?tag_id=1
          type: string
        model:
          example: Item
          type: string
        operation:
          example: listItems
          type: string
        params:
          $ref: '#/components/schemas/TagRelations_broadcasts_params'
    UserResult_settings:
      example:
        showSideBar: true
        showSpeechTime: true
        showTimeColumn: true
        showCheckboxColumn: true
        showSocialBar: true
        zoomFactor: 50
      properties:
        showSideBar:
          example: true
          type: boolean
        showSocialBar:
          example: true
          type: boolean
        showCheckboxColumn:
          example: true
          type: boolean
        showTimeColumn:
          example: true
          type: boolean
        showSpeechTime:
          example: true
          type: boolean
        zoomFactor:
          example: 50
          format: int64
          type: integer
    UserResult_roles:
      example:
        model: Role
        href: https://radiomanager.pluxbox.com/api/v2/roles/2
        params: 2
        operation: getRoleById
      properties:
        href:
          example: https://radiomanager.pluxbox.com/api/v2/roles/2
          format: url
          type: string
        model:
          example: Role
          type: string
        operation:
          example: getRoleById
          type: string
        params:
          example: 2
          format: int64
          type: integer
  securitySchemes:
    API-Key:
      description: Your API key
      in: header
      name: api-key
      type: apiKey
