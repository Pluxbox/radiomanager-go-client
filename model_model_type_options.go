/*
RadioManager

This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.

API version: 2.0
Contact: support@pluxbox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package radiomanagerclient

import (
	"encoding/json"
)

// ModelTypeOptions struct for ModelTypeOptions
type ModelTypeOptions struct {
	Color *string `json:"color,omitempty"`
	SubBroadcast *bool `json:"subBroadcast,omitempty"`
}

// NewModelTypeOptions instantiates a new ModelTypeOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelTypeOptions() *ModelTypeOptions {
	this := ModelTypeOptions{}
	return &this
}

// NewModelTypeOptionsWithDefaults instantiates a new ModelTypeOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelTypeOptionsWithDefaults() *ModelTypeOptions {
	this := ModelTypeOptions{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *ModelTypeOptions) GetColor() string {
	if o == nil || isNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelTypeOptions) GetColorOk() (*string, bool) {
	if o == nil || isNil(o.Color) {
    return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *ModelTypeOptions) HasColor() bool {
	if o != nil && !isNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *ModelTypeOptions) SetColor(v string) {
	o.Color = &v
}

// GetSubBroadcast returns the SubBroadcast field value if set, zero value otherwise.
func (o *ModelTypeOptions) GetSubBroadcast() bool {
	if o == nil || isNil(o.SubBroadcast) {
		var ret bool
		return ret
	}
	return *o.SubBroadcast
}

// GetSubBroadcastOk returns a tuple with the SubBroadcast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelTypeOptions) GetSubBroadcastOk() (*bool, bool) {
	if o == nil || isNil(o.SubBroadcast) {
    return nil, false
	}
	return o.SubBroadcast, true
}

// HasSubBroadcast returns a boolean if a field has been set.
func (o *ModelTypeOptions) HasSubBroadcast() bool {
	if o != nil && !isNil(o.SubBroadcast) {
		return true
	}

	return false
}

// SetSubBroadcast gets a reference to the given bool and assigns it to the SubBroadcast field.
func (o *ModelTypeOptions) SetSubBroadcast(v bool) {
	o.SubBroadcast = &v
}

func (o ModelTypeOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !isNil(o.SubBroadcast) {
		toSerialize["subBroadcast"] = o.SubBroadcast
	}
	return json.Marshal(toSerialize)
}

type NullableModelTypeOptions struct {
	value *ModelTypeOptions
	isSet bool
}

func (v NullableModelTypeOptions) Get() *ModelTypeOptions {
	return v.value
}

func (v *NullableModelTypeOptions) Set(val *ModelTypeOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableModelTypeOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableModelTypeOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelTypeOptions(val *ModelTypeOptions) *NullableModelTypeOptions {
	return &NullableModelTypeOptions{value: val, isSet: true}
}

func (v NullableModelTypeOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelTypeOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


