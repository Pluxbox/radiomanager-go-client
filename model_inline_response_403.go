/*
RadioManager

This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.

API version: 2.0
Contact: support@pluxbox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package radiomanagerclient

import (
	"encoding/json"
)

// InlineResponse403 struct for InlineResponse403
type InlineResponse403 struct {
	// Describes what is forbiden.
	Error *string `json:"error,omitempty"`
	// Corresponding HTTP Response Status Code
	StatusCode *int32 `json:"statusCode,omitempty"`
}

// NewInlineResponse403 instantiates a new InlineResponse403 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse403() *InlineResponse403 {
	this := InlineResponse403{}
	return &this
}

// NewInlineResponse403WithDefaults instantiates a new InlineResponse403 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse403WithDefaults() *InlineResponse403 {
	this := InlineResponse403{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *InlineResponse403) GetError() string {
	if o == nil || isNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse403) GetErrorOk() (*string, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *InlineResponse403) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *InlineResponse403) SetError(v string) {
	o.Error = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *InlineResponse403) GetStatusCode() int32 {
	if o == nil || isNil(o.StatusCode) {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse403) GetStatusCodeOk() (*int32, bool) {
	if o == nil || isNil(o.StatusCode) {
    return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *InlineResponse403) HasStatusCode() bool {
	if o != nil && !isNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *InlineResponse403) SetStatusCode(v int32) {
	o.StatusCode = &v
}

func (o InlineResponse403) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !isNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse403 struct {
	value *InlineResponse403
	isSet bool
}

func (v NullableInlineResponse403) Get() *InlineResponse403 {
	return v.value
}

func (v *NullableInlineResponse403) Set(val *InlineResponse403) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse403) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse403) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse403(val *InlineResponse403) *NullableInlineResponse403 {
	return &NullableInlineResponse403{value: val, isSet: true}
}

func (v NullableInlineResponse403) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse403) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


