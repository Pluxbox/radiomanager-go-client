/*
RadioManager

This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.

API version: 2.0
Contact: support@pluxbox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package radiomanagerclient

import (
	"encoding/json"
)

// StationResult struct for StationResult
type StationResult struct {
	Station *StationResultStation `json:"station,omitempty"`
}

// NewStationResult instantiates a new StationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStationResult() *StationResult {
	this := StationResult{}
	return &this
}

// NewStationResultWithDefaults instantiates a new StationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStationResultWithDefaults() *StationResult {
	this := StationResult{}
	return &this
}

// GetStation returns the Station field value if set, zero value otherwise.
func (o *StationResult) GetStation() StationResultStation {
	if o == nil || isNil(o.Station) {
		var ret StationResultStation
		return ret
	}
	return *o.Station
}

// GetStationOk returns a tuple with the Station field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StationResult) GetStationOk() (*StationResultStation, bool) {
	if o == nil || isNil(o.Station) {
    return nil, false
	}
	return o.Station, true
}

// HasStation returns a boolean if a field has been set.
func (o *StationResult) HasStation() bool {
	if o != nil && !isNil(o.Station) {
		return true
	}

	return false
}

// SetStation gets a reference to the given StationResultStation and assigns it to the Station field.
func (o *StationResult) SetStation(v StationResultStation) {
	o.Station = &v
}

func (o StationResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Station) {
		toSerialize["station"] = o.Station
	}
	return json.Marshal(toSerialize)
}

type NullableStationResult struct {
	value *StationResult
	isSet bool
}

func (v NullableStationResult) Get() *StationResult {
	return v.value
}

func (v *NullableStationResult) Set(val *StationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableStationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableStationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStationResult(val *StationResult) *NullableStationResult {
	return &NullableStationResult{value: val, isSet: true}
}

func (v NullableStationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


