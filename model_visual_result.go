/*
RadioManager

This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.

API version: 2.0
Contact: support@pluxbox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package radiomanagerclient

import (
	"encoding/json"
)

// VisualResult struct for VisualResult
type VisualResult struct {
	Value *string `json:"value,omitempty"`
}

// NewVisualResult instantiates a new VisualResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualResult() *VisualResult {
	this := VisualResult{}
	return &this
}

// NewVisualResultWithDefaults instantiates a new VisualResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualResultWithDefaults() *VisualResult {
	this := VisualResult{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *VisualResult) GetValue() string {
	if o == nil || isNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualResult) GetValueOk() (*string, bool) {
	if o == nil || isNil(o.Value) {
    return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *VisualResult) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *VisualResult) SetValue(v string) {
	o.Value = &v
}

func (o VisualResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableVisualResult struct {
	value *VisualResult
	isSet bool
}

func (v NullableVisualResult) Get() *VisualResult {
	return v.value
}

func (v *NullableVisualResult) Set(val *VisualResult) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualResult) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualResult(val *VisualResult) *NullableVisualResult {
	return &NullableVisualResult{value: val, isSet: true}
}

func (v NullableVisualResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


