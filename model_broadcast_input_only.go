/*
RadioManager

This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.

API version: 2.0
Contact: support@pluxbox.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package radiomanagerclient

import (
	"encoding/json"
)

// BroadcastInputOnly struct for BroadcastInputOnly
type BroadcastInputOnly struct {
	Tags []int32 `json:"tags,omitempty"`
	Presenters []int32 `json:"presenters,omitempty"`
}

// NewBroadcastInputOnly instantiates a new BroadcastInputOnly object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBroadcastInputOnly() *BroadcastInputOnly {
	this := BroadcastInputOnly{}
	return &this
}

// NewBroadcastInputOnlyWithDefaults instantiates a new BroadcastInputOnly object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBroadcastInputOnlyWithDefaults() *BroadcastInputOnly {
	this := BroadcastInputOnly{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *BroadcastInputOnly) GetTags() []int32 {
	if o == nil || isNil(o.Tags) {
		var ret []int32
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BroadcastInputOnly) GetTagsOk() ([]int32, bool) {
	if o == nil || isNil(o.Tags) {
    return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *BroadcastInputOnly) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []int32 and assigns it to the Tags field.
func (o *BroadcastInputOnly) SetTags(v []int32) {
	o.Tags = v
}

// GetPresenters returns the Presenters field value if set, zero value otherwise.
func (o *BroadcastInputOnly) GetPresenters() []int32 {
	if o == nil || isNil(o.Presenters) {
		var ret []int32
		return ret
	}
	return o.Presenters
}

// GetPresentersOk returns a tuple with the Presenters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BroadcastInputOnly) GetPresentersOk() ([]int32, bool) {
	if o == nil || isNil(o.Presenters) {
    return nil, false
	}
	return o.Presenters, true
}

// HasPresenters returns a boolean if a field has been set.
func (o *BroadcastInputOnly) HasPresenters() bool {
	if o != nil && !isNil(o.Presenters) {
		return true
	}

	return false
}

// SetPresenters gets a reference to the given []int32 and assigns it to the Presenters field.
func (o *BroadcastInputOnly) SetPresenters(v []int32) {
	o.Presenters = v
}

func (o BroadcastInputOnly) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !isNil(o.Presenters) {
		toSerialize["presenters"] = o.Presenters
	}
	return json.Marshal(toSerialize)
}

type NullableBroadcastInputOnly struct {
	value *BroadcastInputOnly
	isSet bool
}

func (v NullableBroadcastInputOnly) Get() *BroadcastInputOnly {
	return v.value
}

func (v *NullableBroadcastInputOnly) Set(val *BroadcastInputOnly) {
	v.value = val
	v.isSet = true
}

func (v NullableBroadcastInputOnly) IsSet() bool {
	return v.isSet
}

func (v *NullableBroadcastInputOnly) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBroadcastInputOnly(val *BroadcastInputOnly) *NullableBroadcastInputOnly {
	return &NullableBroadcastInputOnly{value: val, isSet: true}
}

func (v NullableBroadcastInputOnly) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBroadcastInputOnly) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


